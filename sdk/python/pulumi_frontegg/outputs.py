# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'WorkspaceAdminPortal',
    'WorkspaceAdminPortalPalette',
    'WorkspaceAdminPortalPaletteAdminPortal',
    'WorkspaceAdminPortalPaletteAdminPortalError',
    'WorkspaceAdminPortalPaletteAdminPortalInfo',
    'WorkspaceAdminPortalPaletteAdminPortalPrimary',
    'WorkspaceAdminPortalPaletteAdminPortalSecondary',
    'WorkspaceAdminPortalPaletteAdminPortalSuccess',
    'WorkspaceAdminPortalPaletteAdminPortalWarning',
    'WorkspaceAdminPortalPaletteError',
    'WorkspaceAdminPortalPaletteInfo',
    'WorkspaceAdminPortalPaletteLoginBox',
    'WorkspaceAdminPortalPaletteLoginBoxError',
    'WorkspaceAdminPortalPaletteLoginBoxInfo',
    'WorkspaceAdminPortalPaletteLoginBoxPrimary',
    'WorkspaceAdminPortalPaletteLoginBoxSecondary',
    'WorkspaceAdminPortalPaletteLoginBoxSuccess',
    'WorkspaceAdminPortalPaletteLoginBoxWarning',
    'WorkspaceAdminPortalPalettePrimary',
    'WorkspaceAdminPortalPaletteSecondary',
    'WorkspaceAdminPortalPaletteSuccess',
    'WorkspaceAdminPortalPaletteWarning',
    'WorkspaceAuthPolicy',
    'WorkspaceBotDetectionEmail',
    'WorkspaceBruteForceProtectionEmail',
    'WorkspaceBulkTenantsInvitesEmail',
    'WorkspaceCaptchaPolicy',
    'WorkspaceEmailVerificationEmail',
    'WorkspaceFacebookSocialLogin',
    'WorkspaceGithubSocialLogin',
    'WorkspaceGoogleSocialLogin',
    'WorkspaceHostedLogin',
    'WorkspaceImpossibleTravelEmail',
    'WorkspaceLockoutPolicy',
    'WorkspaceMagicCodeEmail',
    'WorkspaceMagicLinkEmail',
    'WorkspaceMfaAuthenticationApp',
    'WorkspaceMfaEnrollEmail',
    'WorkspaceMfaOtcEmail',
    'WorkspaceMfaPolicy',
    'WorkspaceMfaRecoveryCodeEmail',
    'WorkspaceMfaUnenrollEmail',
    'WorkspaceMicrosoftSocialLogin',
    'WorkspaceNewDeviceConnectedEmail',
    'WorkspaceNewMfaMethodEmail',
    'WorkspaceOidc',
    'WorkspacePasswordPolicy',
    'WorkspacePwnedPasswordEmail',
    'WorkspaceRemoveMfaMethodEmail',
    'WorkspaceResetPasswordEmail',
    'WorkspaceResetPhoneNumberEmail',
    'WorkspaceSaml',
    'WorkspaceSmsAuthenticationEnabledEmail',
    'WorkspaceSsoDomainPolicy',
    'WorkspaceSsoMultiTenantPolicy',
    'WorkspaceSuspiciousIpEmail',
    'WorkspaceUserActivationEmail',
    'WorkspaceUserInvitationEmail',
    'WorkspaceUserUsedInvitationEmail',
]

@pulumi.output_type
class WorkspaceAdminPortal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAccountSettings":
            suggest = "enable_account_settings"
        elif key == "enableApiTokens":
            suggest = "enable_api_tokens"
        elif key == "enableAuditLogs":
            suggest = "enable_audit_logs"
        elif key == "enableGroups":
            suggest = "enable_groups"
        elif key == "enablePersonalApiTokens":
            suggest = "enable_personal_api_tokens"
        elif key == "enablePrivacy":
            suggest = "enable_privacy"
        elif key == "enableProfile":
            suggest = "enable_profile"
        elif key == "enableProvisioning":
            suggest = "enable_provisioning"
        elif key == "enableRoles":
            suggest = "enable_roles"
        elif key == "enableSecurity":
            suggest = "enable_security"
        elif key == "enableSso":
            suggest = "enable_sso"
        elif key == "enableSubscriptions":
            suggest = "enable_subscriptions"
        elif key == "enableUsage":
            suggest = "enable_usage"
        elif key == "enableUsers":
            suggest = "enable_users"
        elif key == "enableWebhooks":
            suggest = "enable_webhooks"
        elif key == "paletteAdminPortal":
            suggest = "palette_admin_portal"
        elif key == "paletteLoginBox":
            suggest = "palette_login_box"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_account_settings: bool,
                 enable_api_tokens: bool,
                 enable_audit_logs: bool,
                 enable_groups: bool,
                 enable_personal_api_tokens: bool,
                 enable_privacy: bool,
                 enable_profile: bool,
                 enable_provisioning: bool,
                 enable_roles: bool,
                 enable_security: bool,
                 enable_sso: bool,
                 enable_subscriptions: bool,
                 enable_usage: bool,
                 enable_users: bool,
                 enable_webhooks: bool,
                 palette: Optional['outputs.WorkspaceAdminPortalPalette'] = None,
                 palette_admin_portal: Optional['outputs.WorkspaceAdminPortalPaletteAdminPortal'] = None,
                 palette_login_box: Optional['outputs.WorkspaceAdminPortalPaletteLoginBox'] = None):
        """
        :param bool enable_account_settings: Enable access to account settings in the admin portal.
        :param bool enable_api_tokens: Enable access to API tokens in the admin portal.
        :param bool enable_audit_logs: Enable access to audit logs in the admin portal.
        :param bool enable_groups: Enable access to groups in the admin portal.
        :param bool enable_personal_api_tokens: Enable access to personal API tokens in the admin portal.
        :param bool enable_privacy: Enable access to privacy settings in the admin portal.
        :param bool enable_profile: Enable access to profile settings in the admin portal.
        :param bool enable_provisioning: Enable access to provisioning settings in the admin portal.
        :param bool enable_roles: Enable access to roles and permissions in the admin portal.
        :param bool enable_security: Enable access to security settings in the admin portal.
        :param bool enable_sso: Enable access to SSO settings in the admin portal.
        :param bool enable_subscriptions: Enable access to subscription settings in the admin portal.
        :param bool enable_usage: Enable access to usage information in the admin portal.
        :param bool enable_users: Enable access to user management in the admin portal.
        :param bool enable_webhooks: Enable access to webhooks in the admin portal.
        :param 'WorkspaceAdminPortalPaletteArgs' palette: Configures the color palette for the admin portal.
        :param 'WorkspaceAdminPortalPaletteAdminPortalArgs' palette_admin_portal: Configures the color palette for the admin portal.
        :param 'WorkspaceAdminPortalPaletteLoginBoxArgs' palette_login_box: Configures the color palette for the admin portal.
        """
        pulumi.set(__self__, "enable_account_settings", enable_account_settings)
        pulumi.set(__self__, "enable_api_tokens", enable_api_tokens)
        pulumi.set(__self__, "enable_audit_logs", enable_audit_logs)
        pulumi.set(__self__, "enable_groups", enable_groups)
        pulumi.set(__self__, "enable_personal_api_tokens", enable_personal_api_tokens)
        pulumi.set(__self__, "enable_privacy", enable_privacy)
        pulumi.set(__self__, "enable_profile", enable_profile)
        pulumi.set(__self__, "enable_provisioning", enable_provisioning)
        pulumi.set(__self__, "enable_roles", enable_roles)
        pulumi.set(__self__, "enable_security", enable_security)
        pulumi.set(__self__, "enable_sso", enable_sso)
        pulumi.set(__self__, "enable_subscriptions", enable_subscriptions)
        pulumi.set(__self__, "enable_usage", enable_usage)
        pulumi.set(__self__, "enable_users", enable_users)
        pulumi.set(__self__, "enable_webhooks", enable_webhooks)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_admin_portal is not None:
            pulumi.set(__self__, "palette_admin_portal", palette_admin_portal)
        if palette_login_box is not None:
            pulumi.set(__self__, "palette_login_box", palette_login_box)

    @property
    @pulumi.getter(name="enableAccountSettings")
    def enable_account_settings(self) -> bool:
        """
        Enable access to account settings in the admin portal.
        """
        return pulumi.get(self, "enable_account_settings")

    @property
    @pulumi.getter(name="enableApiTokens")
    def enable_api_tokens(self) -> bool:
        """
        Enable access to API tokens in the admin portal.
        """
        return pulumi.get(self, "enable_api_tokens")

    @property
    @pulumi.getter(name="enableAuditLogs")
    def enable_audit_logs(self) -> bool:
        """
        Enable access to audit logs in the admin portal.
        """
        return pulumi.get(self, "enable_audit_logs")

    @property
    @pulumi.getter(name="enableGroups")
    def enable_groups(self) -> bool:
        """
        Enable access to groups in the admin portal.
        """
        return pulumi.get(self, "enable_groups")

    @property
    @pulumi.getter(name="enablePersonalApiTokens")
    def enable_personal_api_tokens(self) -> bool:
        """
        Enable access to personal API tokens in the admin portal.
        """
        return pulumi.get(self, "enable_personal_api_tokens")

    @property
    @pulumi.getter(name="enablePrivacy")
    def enable_privacy(self) -> bool:
        """
        Enable access to privacy settings in the admin portal.
        """
        return pulumi.get(self, "enable_privacy")

    @property
    @pulumi.getter(name="enableProfile")
    def enable_profile(self) -> bool:
        """
        Enable access to profile settings in the admin portal.
        """
        return pulumi.get(self, "enable_profile")

    @property
    @pulumi.getter(name="enableProvisioning")
    def enable_provisioning(self) -> bool:
        """
        Enable access to provisioning settings in the admin portal.
        """
        return pulumi.get(self, "enable_provisioning")

    @property
    @pulumi.getter(name="enableRoles")
    def enable_roles(self) -> bool:
        """
        Enable access to roles and permissions in the admin portal.
        """
        return pulumi.get(self, "enable_roles")

    @property
    @pulumi.getter(name="enableSecurity")
    def enable_security(self) -> bool:
        """
        Enable access to security settings in the admin portal.
        """
        return pulumi.get(self, "enable_security")

    @property
    @pulumi.getter(name="enableSso")
    def enable_sso(self) -> bool:
        """
        Enable access to SSO settings in the admin portal.
        """
        return pulumi.get(self, "enable_sso")

    @property
    @pulumi.getter(name="enableSubscriptions")
    def enable_subscriptions(self) -> bool:
        """
        Enable access to subscription settings in the admin portal.
        """
        return pulumi.get(self, "enable_subscriptions")

    @property
    @pulumi.getter(name="enableUsage")
    def enable_usage(self) -> bool:
        """
        Enable access to usage information in the admin portal.
        """
        return pulumi.get(self, "enable_usage")

    @property
    @pulumi.getter(name="enableUsers")
    def enable_users(self) -> bool:
        """
        Enable access to user management in the admin portal.
        """
        return pulumi.get(self, "enable_users")

    @property
    @pulumi.getter(name="enableWebhooks")
    def enable_webhooks(self) -> bool:
        """
        Enable access to webhooks in the admin portal.
        """
        return pulumi.get(self, "enable_webhooks")

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use `palette_admin_portal Or/And palette_login_box` instead.""")
    def palette(self) -> Optional['outputs.WorkspaceAdminPortalPalette']:
        """
        Configures the color palette for the admin portal.
        """
        return pulumi.get(self, "palette")

    @property
    @pulumi.getter(name="paletteAdminPortal")
    def palette_admin_portal(self) -> Optional['outputs.WorkspaceAdminPortalPaletteAdminPortal']:
        """
        Configures the color palette for the admin portal.
        """
        return pulumi.get(self, "palette_admin_portal")

    @property
    @pulumi.getter(name="paletteLoginBox")
    def palette_login_box(self) -> Optional['outputs.WorkspaceAdminPortalPaletteLoginBox']:
        """
        Configures the color palette for the admin portal.
        """
        return pulumi.get(self, "palette_login_box")


@pulumi.output_type
class WorkspaceAdminPortalPalette(dict):
    def __init__(__self__, *,
                 errors: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteError']] = None,
                 infos: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteInfo']] = None,
                 primaries: Optional[Sequence['outputs.WorkspaceAdminPortalPalettePrimary']] = None,
                 secondaries: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteSecondary']] = None,
                 successes: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteSuccess']] = None,
                 warnings: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteWarning']] = None):
        """
        :param Sequence['WorkspaceAdminPortalPaletteErrorArgs'] errors: Error color.
        :param Sequence['WorkspaceAdminPortalPaletteInfoArgs'] infos: Info color.
        :param Sequence['WorkspaceAdminPortalPalettePrimaryArgs'] primaries: Primary color.
        :param Sequence['WorkspaceAdminPortalPaletteSecondaryArgs'] secondaries: Secondary color.
        :param Sequence['WorkspaceAdminPortalPaletteSuccessArgs'] successes: Success color.
        :param Sequence['WorkspaceAdminPortalPaletteWarningArgs'] warnings: Warning color.
        """
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if primaries is not None:
            pulumi.set(__self__, "primaries", primaries)
        if secondaries is not None:
            pulumi.set(__self__, "secondaries", secondaries)
        if successes is not None:
            pulumi.set(__self__, "successes", successes)
        if warnings is not None:
            pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteError']]:
        """
        Error color.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteInfo']]:
        """
        Info color.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def primaries(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPalettePrimary']]:
        """
        Primary color.
        """
        return pulumi.get(self, "primaries")

    @property
    @pulumi.getter
    def secondaries(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteSecondary']]:
        """
        Secondary color.
        """
        return pulumi.get(self, "secondaries")

    @property
    @pulumi.getter
    def successes(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteSuccess']]:
        """
        Success color.
        """
        return pulumi.get(self, "successes")

    @property
    @pulumi.getter
    def warnings(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteWarning']]:
        """
        Warning color.
        """
        return pulumi.get(self, "warnings")


@pulumi.output_type
class WorkspaceAdminPortalPaletteAdminPortal(dict):
    def __init__(__self__, *,
                 errors: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteAdminPortalError']] = None,
                 infos: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteAdminPortalInfo']] = None,
                 primaries: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteAdminPortalPrimary']] = None,
                 secondaries: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteAdminPortalSecondary']] = None,
                 successes: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteAdminPortalSuccess']] = None,
                 warnings: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteAdminPortalWarning']] = None):
        """
        :param Sequence['WorkspaceAdminPortalPaletteAdminPortalErrorArgs'] errors: Error color.
        :param Sequence['WorkspaceAdminPortalPaletteAdminPortalInfoArgs'] infos: Info color.
        :param Sequence['WorkspaceAdminPortalPaletteAdminPortalPrimaryArgs'] primaries: Primary color.
        :param Sequence['WorkspaceAdminPortalPaletteAdminPortalSecondaryArgs'] secondaries: Secondary color.
        :param Sequence['WorkspaceAdminPortalPaletteAdminPortalSuccessArgs'] successes: Success color.
        :param Sequence['WorkspaceAdminPortalPaletteAdminPortalWarningArgs'] warnings: Warning color.
        """
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if primaries is not None:
            pulumi.set(__self__, "primaries", primaries)
        if secondaries is not None:
            pulumi.set(__self__, "secondaries", secondaries)
        if successes is not None:
            pulumi.set(__self__, "successes", successes)
        if warnings is not None:
            pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteAdminPortalError']]:
        """
        Error color.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteAdminPortalInfo']]:
        """
        Info color.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def primaries(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteAdminPortalPrimary']]:
        """
        Primary color.
        """
        return pulumi.get(self, "primaries")

    @property
    @pulumi.getter
    def secondaries(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteAdminPortalSecondary']]:
        """
        Secondary color.
        """
        return pulumi.get(self, "secondaries")

    @property
    @pulumi.getter
    def successes(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteAdminPortalSuccess']]:
        """
        Success color.
        """
        return pulumi.get(self, "successes")

    @property
    @pulumi.getter
    def warnings(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteAdminPortalWarning']]:
        """
        Warning color.
        """
        return pulumi.get(self, "warnings")


@pulumi.output_type
class WorkspaceAdminPortalPaletteAdminPortalError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteAdminPortalError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteAdminPortalError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteAdminPortalError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contrast_text: str,
                 dark: str,
                 light: str,
                 main: str):
        """
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteAdminPortalInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteAdminPortalInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteAdminPortalInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteAdminPortalInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contrast_text: str,
                 dark: str,
                 light: str,
                 main: str):
        """
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteAdminPortalPrimary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteAdminPortalPrimary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteAdminPortalPrimary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteAdminPortalPrimary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: str,
                 contrast_text: str,
                 dark: str,
                 hover: str,
                 light: str,
                 main: str):
        """
        :param str active: active color.
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str hover: hover color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "hover", hover)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter
    def active(self) -> str:
        """
        active color.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def hover(self) -> str:
        """
        hover color.
        """
        return pulumi.get(self, "hover")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteAdminPortalSecondary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteAdminPortalSecondary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteAdminPortalSecondary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteAdminPortalSecondary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: str,
                 contrast_text: str,
                 dark: str,
                 hover: str,
                 light: str,
                 main: str):
        """
        :param str active: active color.
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str hover: hover color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "hover", hover)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter
    def active(self) -> str:
        """
        active color.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def hover(self) -> str:
        """
        hover color.
        """
        return pulumi.get(self, "hover")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteAdminPortalSuccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteAdminPortalSuccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteAdminPortalSuccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteAdminPortalSuccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contrast_text: str,
                 dark: str,
                 light: str,
                 main: str):
        """
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteAdminPortalWarning(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteAdminPortalWarning. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteAdminPortalWarning.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteAdminPortalWarning.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contrast_text: str,
                 dark: str,
                 light: str,
                 main: str):
        """
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contrast_text: str,
                 dark: str,
                 light: str,
                 main: str):
        """
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contrast_text: str,
                 dark: str,
                 light: str,
                 main: str):
        """
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteLoginBox(dict):
    def __init__(__self__, *,
                 errors: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteLoginBoxError']] = None,
                 infos: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteLoginBoxInfo']] = None,
                 primaries: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteLoginBoxPrimary']] = None,
                 secondaries: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteLoginBoxSecondary']] = None,
                 successes: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteLoginBoxSuccess']] = None,
                 warnings: Optional[Sequence['outputs.WorkspaceAdminPortalPaletteLoginBoxWarning']] = None):
        """
        :param Sequence['WorkspaceAdminPortalPaletteLoginBoxErrorArgs'] errors: Error color.
        :param Sequence['WorkspaceAdminPortalPaletteLoginBoxInfoArgs'] infos: Info color.
        :param Sequence['WorkspaceAdminPortalPaletteLoginBoxPrimaryArgs'] primaries: Primary color.
        :param Sequence['WorkspaceAdminPortalPaletteLoginBoxSecondaryArgs'] secondaries: Secondary color.
        :param Sequence['WorkspaceAdminPortalPaletteLoginBoxSuccessArgs'] successes: Success color.
        :param Sequence['WorkspaceAdminPortalPaletteLoginBoxWarningArgs'] warnings: Warning color.
        """
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if primaries is not None:
            pulumi.set(__self__, "primaries", primaries)
        if secondaries is not None:
            pulumi.set(__self__, "secondaries", secondaries)
        if successes is not None:
            pulumi.set(__self__, "successes", successes)
        if warnings is not None:
            pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteLoginBoxError']]:
        """
        Error color.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def infos(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteLoginBoxInfo']]:
        """
        Info color.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def primaries(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteLoginBoxPrimary']]:
        """
        Primary color.
        """
        return pulumi.get(self, "primaries")

    @property
    @pulumi.getter
    def secondaries(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteLoginBoxSecondary']]:
        """
        Secondary color.
        """
        return pulumi.get(self, "secondaries")

    @property
    @pulumi.getter
    def successes(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteLoginBoxSuccess']]:
        """
        Success color.
        """
        return pulumi.get(self, "successes")

    @property
    @pulumi.getter
    def warnings(self) -> Optional[Sequence['outputs.WorkspaceAdminPortalPaletteLoginBoxWarning']]:
        """
        Warning color.
        """
        return pulumi.get(self, "warnings")


@pulumi.output_type
class WorkspaceAdminPortalPaletteLoginBoxError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteLoginBoxError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteLoginBoxError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteLoginBoxError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contrast_text: str,
                 dark: str,
                 light: str,
                 main: str):
        """
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteLoginBoxInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteLoginBoxInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteLoginBoxInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteLoginBoxInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contrast_text: str,
                 dark: str,
                 light: str,
                 main: str):
        """
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteLoginBoxPrimary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteLoginBoxPrimary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteLoginBoxPrimary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteLoginBoxPrimary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: str,
                 contrast_text: str,
                 dark: str,
                 hover: str,
                 light: str,
                 main: str):
        """
        :param str active: active color.
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str hover: hover color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "hover", hover)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter
    def active(self) -> str:
        """
        active color.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def hover(self) -> str:
        """
        hover color.
        """
        return pulumi.get(self, "hover")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteLoginBoxSecondary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteLoginBoxSecondary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteLoginBoxSecondary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteLoginBoxSecondary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: str,
                 contrast_text: str,
                 dark: str,
                 hover: str,
                 light: str,
                 main: str):
        """
        :param str active: active color.
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str hover: hover color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "hover", hover)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter
    def active(self) -> str:
        """
        active color.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def hover(self) -> str:
        """
        hover color.
        """
        return pulumi.get(self, "hover")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteLoginBoxSuccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteLoginBoxSuccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteLoginBoxSuccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteLoginBoxSuccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contrast_text: str,
                 dark: str,
                 light: str,
                 main: str):
        """
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteLoginBoxWarning(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteLoginBoxWarning. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteLoginBoxWarning.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteLoginBoxWarning.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contrast_text: str,
                 dark: str,
                 light: str,
                 main: str):
        """
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPalettePrimary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPalettePrimary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPalettePrimary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPalettePrimary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: str,
                 contrast_text: str,
                 dark: str,
                 hover: str,
                 light: str,
                 main: str):
        """
        :param str active: active color.
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str hover: hover color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "hover", hover)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter
    def active(self) -> str:
        """
        active color.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def hover(self) -> str:
        """
        hover color.
        """
        return pulumi.get(self, "hover")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteSecondary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteSecondary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteSecondary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteSecondary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: str,
                 contrast_text: str,
                 dark: str,
                 hover: str,
                 light: str,
                 main: str):
        """
        :param str active: active color.
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str hover: hover color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "hover", hover)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter
    def active(self) -> str:
        """
        active color.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def hover(self) -> str:
        """
        hover color.
        """
        return pulumi.get(self, "hover")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteSuccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteSuccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteSuccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteSuccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contrast_text: str,
                 dark: str,
                 light: str,
                 main: str):
        """
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAdminPortalPaletteWarning(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contrastText":
            suggest = "contrast_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAdminPortalPaletteWarning. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAdminPortalPaletteWarning.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAdminPortalPaletteWarning.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contrast_text: str,
                 dark: str,
                 light: str,
                 main: str):
        """
        :param str contrast_text: contrast_text color.
        :param str dark: dark color.
        :param str light: light color.
        :param str main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> str:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @property
    @pulumi.getter
    def dark(self) -> str:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @property
    @pulumi.getter
    def light(self) -> str:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @property
    @pulumi.getter
    def main(self) -> str:
        """
        main color.
        """
        return pulumi.get(self, "main")


@pulumi.output_type
class WorkspaceAuthPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowSignups":
            suggest = "allow_signups"
        elif key == "allowTenantInvitations":
            suggest = "allow_tenant_invitations"
        elif key == "allowUnverifiedUsers":
            suggest = "allow_unverified_users"
        elif key == "authStrategy":
            suggest = "auth_strategy"
        elif key == "enableApiTokens":
            suggest = "enable_api_tokens"
        elif key == "enableRoles":
            suggest = "enable_roles"
        elif key == "jwtAccessTokenExpiration":
            suggest = "jwt_access_token_expiration"
        elif key == "jwtRefreshTokenExpiration":
            suggest = "jwt_refresh_token_expiration"
        elif key == "sameSiteCookiePolicy":
            suggest = "same_site_cookie_policy"
        elif key == "jwtAlgorithm":
            suggest = "jwt_algorithm"
        elif key == "jwtPublicKey":
            suggest = "jwt_public_key"
        elif key == "machineToMachineAuthStrategy":
            suggest = "machine_to_machine_auth_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceAuthPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceAuthPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceAuthPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_signups: bool,
                 allow_tenant_invitations: bool,
                 allow_unverified_users: bool,
                 auth_strategy: str,
                 enable_api_tokens: bool,
                 enable_roles: bool,
                 jwt_access_token_expiration: int,
                 jwt_refresh_token_expiration: int,
                 same_site_cookie_policy: str,
                 jwt_algorithm: Optional[str] = None,
                 jwt_public_key: Optional[str] = None,
                 machine_to_machine_auth_strategy: Optional[str] = None):
        """
        :param bool allow_signups: Whether users are allowed to sign up.
        :param bool allow_tenant_invitations: Allow tenants to invite new users via an invitation link.
        :param bool allow_unverified_users: Whether unverified users are allowed to log in.
        :param str auth_strategy: The authentication strategy to use for people logging in.
               
               	Must be one of "EmailAndPassword", "Code", "MagicLink", "NoLocalAuthentication", "SmsCode"
        :param bool enable_api_tokens: Whether users can create API tokens.
        :param bool enable_roles: Whether granular roles and permissions are enabled.
        :param int jwt_access_token_expiration: The expiration time for the JWT access tokens issued by Frontegg.
        :param int jwt_refresh_token_expiration: The expiration time for the JWT refresh tokens issued by Frontegg.
        :param str same_site_cookie_policy: The SameSite policy to use for Frontegg cookies.
               
               	Must be one of "none", "lax", or "strict".
        :param str jwt_algorithm: The algorithm Frontegg uses to sign JWT tokens.
        :param str jwt_public_key: The public key that Frontegg uses to sign JWT tokens.
        :param str machine_to_machine_auth_strategy: Type of tokens users will be able to generate.
               							Must be one of "ClientCredentials" or "AccessToken".
        """
        pulumi.set(__self__, "allow_signups", allow_signups)
        pulumi.set(__self__, "allow_tenant_invitations", allow_tenant_invitations)
        pulumi.set(__self__, "allow_unverified_users", allow_unverified_users)
        pulumi.set(__self__, "auth_strategy", auth_strategy)
        pulumi.set(__self__, "enable_api_tokens", enable_api_tokens)
        pulumi.set(__self__, "enable_roles", enable_roles)
        pulumi.set(__self__, "jwt_access_token_expiration", jwt_access_token_expiration)
        pulumi.set(__self__, "jwt_refresh_token_expiration", jwt_refresh_token_expiration)
        pulumi.set(__self__, "same_site_cookie_policy", same_site_cookie_policy)
        if jwt_algorithm is not None:
            pulumi.set(__self__, "jwt_algorithm", jwt_algorithm)
        if jwt_public_key is not None:
            pulumi.set(__self__, "jwt_public_key", jwt_public_key)
        if machine_to_machine_auth_strategy is not None:
            pulumi.set(__self__, "machine_to_machine_auth_strategy", machine_to_machine_auth_strategy)

    @property
    @pulumi.getter(name="allowSignups")
    def allow_signups(self) -> bool:
        """
        Whether users are allowed to sign up.
        """
        return pulumi.get(self, "allow_signups")

    @property
    @pulumi.getter(name="allowTenantInvitations")
    def allow_tenant_invitations(self) -> bool:
        """
        Allow tenants to invite new users via an invitation link.
        """
        return pulumi.get(self, "allow_tenant_invitations")

    @property
    @pulumi.getter(name="allowUnverifiedUsers")
    def allow_unverified_users(self) -> bool:
        """
        Whether unverified users are allowed to log in.
        """
        return pulumi.get(self, "allow_unverified_users")

    @property
    @pulumi.getter(name="authStrategy")
    def auth_strategy(self) -> str:
        """
        The authentication strategy to use for people logging in.

        	Must be one of "EmailAndPassword", "Code", "MagicLink", "NoLocalAuthentication", "SmsCode"
        """
        return pulumi.get(self, "auth_strategy")

    @property
    @pulumi.getter(name="enableApiTokens")
    def enable_api_tokens(self) -> bool:
        """
        Whether users can create API tokens.
        """
        return pulumi.get(self, "enable_api_tokens")

    @property
    @pulumi.getter(name="enableRoles")
    def enable_roles(self) -> bool:
        """
        Whether granular roles and permissions are enabled.
        """
        return pulumi.get(self, "enable_roles")

    @property
    @pulumi.getter(name="jwtAccessTokenExpiration")
    def jwt_access_token_expiration(self) -> int:
        """
        The expiration time for the JWT access tokens issued by Frontegg.
        """
        return pulumi.get(self, "jwt_access_token_expiration")

    @property
    @pulumi.getter(name="jwtRefreshTokenExpiration")
    def jwt_refresh_token_expiration(self) -> int:
        """
        The expiration time for the JWT refresh tokens issued by Frontegg.
        """
        return pulumi.get(self, "jwt_refresh_token_expiration")

    @property
    @pulumi.getter(name="sameSiteCookiePolicy")
    def same_site_cookie_policy(self) -> str:
        """
        The SameSite policy to use for Frontegg cookies.

        	Must be one of "none", "lax", or "strict".
        """
        return pulumi.get(self, "same_site_cookie_policy")

    @property
    @pulumi.getter(name="jwtAlgorithm")
    def jwt_algorithm(self) -> Optional[str]:
        """
        The algorithm Frontegg uses to sign JWT tokens.
        """
        return pulumi.get(self, "jwt_algorithm")

    @property
    @pulumi.getter(name="jwtPublicKey")
    def jwt_public_key(self) -> Optional[str]:
        """
        The public key that Frontegg uses to sign JWT tokens.
        """
        return pulumi.get(self, "jwt_public_key")

    @property
    @pulumi.getter(name="machineToMachineAuthStrategy")
    def machine_to_machine_auth_strategy(self) -> Optional[str]:
        """
        Type of tokens users will be able to generate.
        							Must be one of "ClientCredentials" or "AccessToken".
        """
        return pulumi.get(self, "machine_to_machine_auth_strategy")


@pulumi.output_type
class WorkspaceBotDetectionEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceBotDetectionEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceBotDetectionEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceBotDetectionEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceBruteForceProtectionEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceBruteForceProtectionEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceBruteForceProtectionEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceBruteForceProtectionEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceBulkTenantsInvitesEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceBulkTenantsInvitesEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceBulkTenantsInvitesEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceBulkTenantsInvitesEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceCaptchaPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minScore":
            suggest = "min_score"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "siteKey":
            suggest = "site_key"
        elif key == "ignoredEmails":
            suggest = "ignored_emails"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceCaptchaPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceCaptchaPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceCaptchaPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_score: float,
                 secret_key: str,
                 site_key: str,
                 ignored_emails: Optional[Sequence[str]] = None):
        """
        :param float min_score: The minimum CAPTCHA score to accept. Set to 0.0 to accept all scores.
        :param str secret_key: The reCAPTCHA secret key to use.
        :param str site_key: The reCAPTCHA site key to use.
        :param Sequence[str] ignored_emails: Email addresses that should be exempt from CAPTCHA checks.
        """
        pulumi.set(__self__, "min_score", min_score)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "site_key", site_key)
        if ignored_emails is not None:
            pulumi.set(__self__, "ignored_emails", ignored_emails)

    @property
    @pulumi.getter(name="minScore")
    def min_score(self) -> float:
        """
        The minimum CAPTCHA score to accept. Set to 0.0 to accept all scores.
        """
        return pulumi.get(self, "min_score")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        The reCAPTCHA secret key to use.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="siteKey")
    def site_key(self) -> str:
        """
        The reCAPTCHA site key to use.
        """
        return pulumi.get(self, "site_key")

    @property
    @pulumi.getter(name="ignoredEmails")
    def ignored_emails(self) -> Optional[Sequence[str]]:
        """
        Email addresses that should be exempt from CAPTCHA checks.
        """
        return pulumi.get(self, "ignored_emails")


@pulumi.output_type
class WorkspaceEmailVerificationEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceEmailVerificationEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceEmailVerificationEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceEmailVerificationEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceFacebookSocialLogin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "clientId":
            suggest = "client_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceFacebookSocialLogin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceFacebookSocialLogin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceFacebookSocialLogin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redirect_url: str,
                 client_id: Optional[str] = None,
                 customised: Optional[bool] = None,
                 secret: Optional[str] = None):
        """
        :param str redirect_url: The URL to redirect to after a successful authentication.
        :param str client_id: The client ID of the Facebook application to authenticate with. Required when setting **`customised`** parameter to true.
        :param bool customised: Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        :param str secret: The secret associated with the Facebook application. Required when setting **`customised`** parameter to true.
        """
        pulumi.set(__self__, "redirect_url", redirect_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if customised is not None:
            pulumi.set(__self__, "customised", customised)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        The URL to redirect to after a successful authentication.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        The client ID of the Facebook application to authenticate with. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def customised(self) -> Optional[bool]:
        """
        Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        """
        return pulumi.get(self, "customised")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        The secret associated with the Facebook application. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class WorkspaceGithubSocialLogin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "clientId":
            suggest = "client_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceGithubSocialLogin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceGithubSocialLogin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceGithubSocialLogin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redirect_url: str,
                 client_id: Optional[str] = None,
                 customised: Optional[bool] = None,
                 secret: Optional[str] = None):
        """
        :param str redirect_url: The URL to redirect to after a successful authentication.
        :param str client_id: The client ID of the GitHub application to authenticate with. Required when setting **`customised`** parameter to true.
        :param bool customised: Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        :param str secret: The secret associated with the GitHub application. Required when setting **`customised`** parameter to true.
        """
        pulumi.set(__self__, "redirect_url", redirect_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if customised is not None:
            pulumi.set(__self__, "customised", customised)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        The URL to redirect to after a successful authentication.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        The client ID of the GitHub application to authenticate with. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def customised(self) -> Optional[bool]:
        """
        Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        """
        return pulumi.get(self, "customised")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        The secret associated with the GitHub application. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class WorkspaceGoogleSocialLogin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "clientId":
            suggest = "client_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceGoogleSocialLogin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceGoogleSocialLogin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceGoogleSocialLogin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redirect_url: str,
                 client_id: Optional[str] = None,
                 customised: Optional[bool] = None,
                 secret: Optional[str] = None):
        """
        :param str redirect_url: The URL to redirect to after a successful authentication.
        :param str client_id: The client ID of the Google application to authenticate with. Required when setting **`customised`** parameter to true.
        :param bool customised: Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        :param str secret: The secret associated with the Google application. Required when setting **`customised`** parameter to true.
        """
        pulumi.set(__self__, "redirect_url", redirect_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if customised is not None:
            pulumi.set(__self__, "customised", customised)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        The URL to redirect to after a successful authentication.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        The client ID of the Google application to authenticate with. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def customised(self) -> Optional[bool]:
        """
        Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        """
        return pulumi.get(self, "customised")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        The secret associated with the Google application. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class WorkspaceHostedLogin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedRedirectUrls":
            suggest = "allowed_redirect_urls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceHostedLogin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceHostedLogin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceHostedLogin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_redirect_urls: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] allowed_redirect_urls: Allowed redirect URLs.
        """
        if allowed_redirect_urls is not None:
            pulumi.set(__self__, "allowed_redirect_urls", allowed_redirect_urls)

    @property
    @pulumi.getter(name="allowedRedirectUrls")
    def allowed_redirect_urls(self) -> Optional[Sequence[str]]:
        """
        Allowed redirect URLs.
        """
        return pulumi.get(self, "allowed_redirect_urls")


@pulumi.output_type
class WorkspaceImpossibleTravelEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceImpossibleTravelEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceImpossibleTravelEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceImpossibleTravelEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceLockoutPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAttempts":
            suggest = "max_attempts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceLockoutPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceLockoutPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceLockoutPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_attempts: int):
        """
        :param int max_attempts: The number of failed attempts after which a user will be locked out.
        """
        pulumi.set(__self__, "max_attempts", max_attempts)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> int:
        """
        The number of failed attempts after which a user will be locked out.
        """
        return pulumi.get(self, "max_attempts")


@pulumi.output_type
class WorkspaceMagicCodeEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceMagicCodeEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceMagicCodeEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceMagicCodeEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceMagicLinkEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceMagicLinkEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceMagicLinkEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceMagicLinkEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceMfaAuthenticationApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceMfaAuthenticationApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceMfaAuthenticationApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceMfaAuthenticationApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: str):
        """
        :param str service_name: The service name to display in the authentication app.
        """
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The service name to display in the authentication app.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class WorkspaceMfaEnrollEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceMfaEnrollEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceMfaEnrollEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceMfaEnrollEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceMfaOtcEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceMfaOtcEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceMfaOtcEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceMfaOtcEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceMfaPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRememberDevice":
            suggest = "allow_remember_device"
        elif key == "deviceExpiration":
            suggest = "device_expiration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceMfaPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceMfaPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceMfaPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_remember_device: bool,
                 device_expiration: int,
                 enforce: str):
        """
        :param bool allow_remember_device: Allow users to remember their MFA devices.
        :param int device_expiration: The number of seconds that MFA devices can be remembered for, if allow_remember_my_device is true.
        :param str enforce: Whether to force use of MFA.
               
               	Must be one of "off", "on", or "unless-saml".
        """
        pulumi.set(__self__, "allow_remember_device", allow_remember_device)
        pulumi.set(__self__, "device_expiration", device_expiration)
        pulumi.set(__self__, "enforce", enforce)

    @property
    @pulumi.getter(name="allowRememberDevice")
    def allow_remember_device(self) -> bool:
        """
        Allow users to remember their MFA devices.
        """
        return pulumi.get(self, "allow_remember_device")

    @property
    @pulumi.getter(name="deviceExpiration")
    def device_expiration(self) -> int:
        """
        The number of seconds that MFA devices can be remembered for, if allow_remember_my_device is true.
        """
        return pulumi.get(self, "device_expiration")

    @property
    @pulumi.getter
    def enforce(self) -> str:
        """
        Whether to force use of MFA.

        	Must be one of "off", "on", or "unless-saml".
        """
        return pulumi.get(self, "enforce")


@pulumi.output_type
class WorkspaceMfaRecoveryCodeEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceMfaRecoveryCodeEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceMfaRecoveryCodeEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceMfaRecoveryCodeEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceMfaUnenrollEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceMfaUnenrollEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceMfaUnenrollEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceMfaUnenrollEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceMicrosoftSocialLogin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "clientId":
            suggest = "client_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceMicrosoftSocialLogin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceMicrosoftSocialLogin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceMicrosoftSocialLogin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redirect_url: str,
                 client_id: Optional[str] = None,
                 customised: Optional[bool] = None,
                 secret: Optional[str] = None):
        """
        :param str redirect_url: The URL to redirect to after a successful authentication.
        :param str client_id: The client ID of the Microsoft application to authenticate with. Required when setting **`customised`** parameter to true.
        :param bool customised: Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        :param str secret: The secret associated with the Microsoft application. Required when setting **`customised`** parameter to true.
        """
        pulumi.set(__self__, "redirect_url", redirect_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if customised is not None:
            pulumi.set(__self__, "customised", customised)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        The URL to redirect to after a successful authentication.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        The client ID of the Microsoft application to authenticate with. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def customised(self) -> Optional[bool]:
        """
        Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        """
        return pulumi.get(self, "customised")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        The secret associated with the Microsoft application. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class WorkspaceNewDeviceConnectedEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceNewDeviceConnectedEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceNewDeviceConnectedEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceNewDeviceConnectedEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceNewMfaMethodEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceNewMfaMethodEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceNewMfaMethodEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceNewMfaMethodEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceOidc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redirectUrl":
            suggest = "redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceOidc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceOidc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceOidc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redirect_url: str):
        """
        :param str redirect_url: The URL to redirect to after the OIDC exchange.
        """
        pulumi.set(__self__, "redirect_url", redirect_url)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        The URL to redirect to after the OIDC exchange.
        """
        return pulumi.get(self, "redirect_url")


@pulumi.output_type
class WorkspacePasswordPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowPassphrases":
            suggest = "allow_passphrases"
        elif key == "maxLength":
            suggest = "max_length"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "minPhraseLength":
            suggest = "min_phrase_length"
        elif key == "minTests":
            suggest = "min_tests"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspacePasswordPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspacePasswordPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspacePasswordPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_passphrases: bool,
                 history: int,
                 max_length: int,
                 min_length: int,
                 min_phrase_length: int,
                 min_tests: int):
        """
        :param int history: The number of historical passwords to prevent users from reusing. Set to zero to disable.
        :param int max_length: The maximum length of a password.
        :param int min_length: The minimum length of a password.
        :param int min_tests: The minimum number of strength tests the password must meet.
        """
        pulumi.set(__self__, "allow_passphrases", allow_passphrases)
        pulumi.set(__self__, "history", history)
        pulumi.set(__self__, "max_length", max_length)
        pulumi.set(__self__, "min_length", min_length)
        pulumi.set(__self__, "min_phrase_length", min_phrase_length)
        pulumi.set(__self__, "min_tests", min_tests)

    @property
    @pulumi.getter(name="allowPassphrases")
    def allow_passphrases(self) -> bool:
        return pulumi.get(self, "allow_passphrases")

    @property
    @pulumi.getter
    def history(self) -> int:
        """
        The number of historical passwords to prevent users from reusing. Set to zero to disable.
        """
        return pulumi.get(self, "history")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> int:
        """
        The maximum length of a password.
        """
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> int:
        """
        The minimum length of a password.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="minPhraseLength")
    def min_phrase_length(self) -> int:
        return pulumi.get(self, "min_phrase_length")

    @property
    @pulumi.getter(name="minTests")
    def min_tests(self) -> int:
        """
        The minimum number of strength tests the password must meet.
        """
        return pulumi.get(self, "min_tests")


@pulumi.output_type
class WorkspacePwnedPasswordEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspacePwnedPasswordEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspacePwnedPasswordEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspacePwnedPasswordEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceRemoveMfaMethodEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceRemoveMfaMethodEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceRemoveMfaMethodEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceRemoveMfaMethodEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceResetPasswordEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceResetPasswordEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceResetPasswordEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceResetPasswordEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceResetPhoneNumberEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceResetPhoneNumberEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceResetPhoneNumberEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceResetPhoneNumberEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceSaml(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acsUrl":
            suggest = "acs_url"
        elif key == "spEntityId":
            suggest = "sp_entity_id"
        elif key == "redirectUrl":
            suggest = "redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceSaml. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceSaml.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceSaml.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acs_url: str,
                 sp_entity_id: str,
                 redirect_url: Optional[str] = None):
        """
        :param str acs_url: The ACS URL for the SAML authentication flow.
        :param str sp_entity_id: The name of the service provider that will be displayed to users.
        :param str redirect_url: The URL to redirect to after the SAML exchange.
        """
        pulumi.set(__self__, "acs_url", acs_url)
        pulumi.set(__self__, "sp_entity_id", sp_entity_id)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)

    @property
    @pulumi.getter(name="acsUrl")
    def acs_url(self) -> str:
        """
        The ACS URL for the SAML authentication flow.
        """
        return pulumi.get(self, "acs_url")

    @property
    @pulumi.getter(name="spEntityId")
    def sp_entity_id(self) -> str:
        """
        The name of the service provider that will be displayed to users.
        """
        return pulumi.get(self, "sp_entity_id")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The URL to redirect to after the SAML exchange.
        """
        return pulumi.get(self, "redirect_url")


@pulumi.output_type
class WorkspaceSmsAuthenticationEnabledEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceSmsAuthenticationEnabledEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceSmsAuthenticationEnabledEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceSmsAuthenticationEnabledEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceSsoDomainPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowVerifiedUsersToAddDomains":
            suggest = "allow_verified_users_to_add_domains"
        elif key == "bypassDomainCrossValidation":
            suggest = "bypass_domain_cross_validation"
        elif key == "skipDomainVerification":
            suggest = "skip_domain_verification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceSsoDomainPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceSsoDomainPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceSsoDomainPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_verified_users_to_add_domains: Optional[bool] = None,
                 bypass_domain_cross_validation: Optional[bool] = None,
                 skip_domain_verification: Optional[bool] = None):
        """
        :param bool allow_verified_users_to_add_domains: Whether to allow users to add their own email domain without validating the domain through DNS.
        :param bool bypass_domain_cross_validation: Whether to allow users to sign in even via SSO even if the associated domain has not been validated through DNS.
        :param bool skip_domain_verification: Whether to automatically mark new SSO domains as validated, without validating the domain through DNS.
        """
        if allow_verified_users_to_add_domains is not None:
            pulumi.set(__self__, "allow_verified_users_to_add_domains", allow_verified_users_to_add_domains)
        if bypass_domain_cross_validation is not None:
            pulumi.set(__self__, "bypass_domain_cross_validation", bypass_domain_cross_validation)
        if skip_domain_verification is not None:
            pulumi.set(__self__, "skip_domain_verification", skip_domain_verification)

    @property
    @pulumi.getter(name="allowVerifiedUsersToAddDomains")
    def allow_verified_users_to_add_domains(self) -> Optional[bool]:
        """
        Whether to allow users to add their own email domain without validating the domain through DNS.
        """
        return pulumi.get(self, "allow_verified_users_to_add_domains")

    @property
    @pulumi.getter(name="bypassDomainCrossValidation")
    def bypass_domain_cross_validation(self) -> Optional[bool]:
        """
        Whether to allow users to sign in even via SSO even if the associated domain has not been validated through DNS.
        """
        return pulumi.get(self, "bypass_domain_cross_validation")

    @property
    @pulumi.getter(name="skipDomainVerification")
    def skip_domain_verification(self) -> Optional[bool]:
        """
        Whether to automatically mark new SSO domains as validated, without validating the domain through DNS.
        """
        return pulumi.get(self, "skip_domain_verification")


@pulumi.output_type
class WorkspaceSsoMultiTenantPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unspecifiedTenantStrategy":
            suggest = "unspecified_tenant_strategy"
        elif key == "useActiveTenant":
            suggest = "use_active_tenant"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceSsoMultiTenantPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceSsoMultiTenantPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceSsoMultiTenantPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 unspecified_tenant_strategy: Optional[str] = None,
                 use_active_tenant: Optional[bool] = None):
        """
        :param str unspecified_tenant_strategy: Strategy for logging in nonexisting users that match SSO configurations for multiple tenants when no tenant has been specified. Either BLOCK or FIRST_CREATED.
        :param bool use_active_tenant: Whether users with existing accounts that match SSO configurations for multiple tenants should be logged in using the SSO for their active (last logged into) account, or whether the unspecified tenant strategy should apply.
        """
        if unspecified_tenant_strategy is not None:
            pulumi.set(__self__, "unspecified_tenant_strategy", unspecified_tenant_strategy)
        if use_active_tenant is not None:
            pulumi.set(__self__, "use_active_tenant", use_active_tenant)

    @property
    @pulumi.getter(name="unspecifiedTenantStrategy")
    def unspecified_tenant_strategy(self) -> Optional[str]:
        """
        Strategy for logging in nonexisting users that match SSO configurations for multiple tenants when no tenant has been specified. Either BLOCK or FIRST_CREATED.
        """
        return pulumi.get(self, "unspecified_tenant_strategy")

    @property
    @pulumi.getter(name="useActiveTenant")
    def use_active_tenant(self) -> Optional[bool]:
        """
        Whether users with existing accounts that match SSO configurations for multiple tenants should be logged in using the SSO for their active (last logged into) account, or whether the unspecified tenant strategy should apply.
        """
        return pulumi.get(self, "use_active_tenant")


@pulumi.output_type
class WorkspaceSuspiciousIpEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceSuspiciousIpEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceSuspiciousIpEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceSuspiciousIpEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceUserActivationEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceUserActivationEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceUserActivationEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceUserActivationEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceUserInvitationEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceUserInvitationEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceUserInvitationEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceUserInvitationEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


@pulumi.output_type
class WorkspaceUserUsedInvitationEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "fromName":
            suggest = "from_name"
        elif key == "htmlTemplate":
            suggest = "html_template"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "successRedirectUrl":
            suggest = "success_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceUserUsedInvitationEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceUserUsedInvitationEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceUserUsedInvitationEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_address: str,
                 from_name: str,
                 html_template: str,
                 subject: str,
                 redirect_url: Optional[str] = None,
                 success_redirect_url: Optional[str] = None):
        """
        :param str from_address: The address to use in the "From" header of the email.
        :param str from_name: The name to use in the "From" header of the email.
        :param str html_template: The HTML template to use in the email.
        :param str subject: The subject of the email.
        :param str redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param str success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> str:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> str:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> str:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @property
    @pulumi.getter
    def subject(self) -> str:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[str]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[str]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")


