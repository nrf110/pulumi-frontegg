# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'WorkspaceAdminPortalArgs',
    'WorkspaceAdminPortalArgsDict',
    'WorkspaceAdminPortalPaletteArgs',
    'WorkspaceAdminPortalPaletteArgsDict',
    'WorkspaceAdminPortalPaletteAdminPortalArgs',
    'WorkspaceAdminPortalPaletteAdminPortalArgsDict',
    'WorkspaceAdminPortalPaletteAdminPortalErrorArgs',
    'WorkspaceAdminPortalPaletteAdminPortalErrorArgsDict',
    'WorkspaceAdminPortalPaletteAdminPortalInfoArgs',
    'WorkspaceAdminPortalPaletteAdminPortalInfoArgsDict',
    'WorkspaceAdminPortalPaletteAdminPortalPrimaryArgs',
    'WorkspaceAdminPortalPaletteAdminPortalPrimaryArgsDict',
    'WorkspaceAdminPortalPaletteAdminPortalSecondaryArgs',
    'WorkspaceAdminPortalPaletteAdminPortalSecondaryArgsDict',
    'WorkspaceAdminPortalPaletteAdminPortalSuccessArgs',
    'WorkspaceAdminPortalPaletteAdminPortalSuccessArgsDict',
    'WorkspaceAdminPortalPaletteAdminPortalWarningArgs',
    'WorkspaceAdminPortalPaletteAdminPortalWarningArgsDict',
    'WorkspaceAdminPortalPaletteErrorArgs',
    'WorkspaceAdminPortalPaletteErrorArgsDict',
    'WorkspaceAdminPortalPaletteInfoArgs',
    'WorkspaceAdminPortalPaletteInfoArgsDict',
    'WorkspaceAdminPortalPaletteLoginBoxArgs',
    'WorkspaceAdminPortalPaletteLoginBoxArgsDict',
    'WorkspaceAdminPortalPaletteLoginBoxErrorArgs',
    'WorkspaceAdminPortalPaletteLoginBoxErrorArgsDict',
    'WorkspaceAdminPortalPaletteLoginBoxInfoArgs',
    'WorkspaceAdminPortalPaletteLoginBoxInfoArgsDict',
    'WorkspaceAdminPortalPaletteLoginBoxPrimaryArgs',
    'WorkspaceAdminPortalPaletteLoginBoxPrimaryArgsDict',
    'WorkspaceAdminPortalPaletteLoginBoxSecondaryArgs',
    'WorkspaceAdminPortalPaletteLoginBoxSecondaryArgsDict',
    'WorkspaceAdminPortalPaletteLoginBoxSuccessArgs',
    'WorkspaceAdminPortalPaletteLoginBoxSuccessArgsDict',
    'WorkspaceAdminPortalPaletteLoginBoxWarningArgs',
    'WorkspaceAdminPortalPaletteLoginBoxWarningArgsDict',
    'WorkspaceAdminPortalPalettePrimaryArgs',
    'WorkspaceAdminPortalPalettePrimaryArgsDict',
    'WorkspaceAdminPortalPaletteSecondaryArgs',
    'WorkspaceAdminPortalPaletteSecondaryArgsDict',
    'WorkspaceAdminPortalPaletteSuccessArgs',
    'WorkspaceAdminPortalPaletteSuccessArgsDict',
    'WorkspaceAdminPortalPaletteWarningArgs',
    'WorkspaceAdminPortalPaletteWarningArgsDict',
    'WorkspaceAuthPolicyArgs',
    'WorkspaceAuthPolicyArgsDict',
    'WorkspaceBotDetectionEmailArgs',
    'WorkspaceBotDetectionEmailArgsDict',
    'WorkspaceBruteForceProtectionEmailArgs',
    'WorkspaceBruteForceProtectionEmailArgsDict',
    'WorkspaceBulkTenantsInvitesEmailArgs',
    'WorkspaceBulkTenantsInvitesEmailArgsDict',
    'WorkspaceCaptchaPolicyArgs',
    'WorkspaceCaptchaPolicyArgsDict',
    'WorkspaceEmailVerificationEmailArgs',
    'WorkspaceEmailVerificationEmailArgsDict',
    'WorkspaceFacebookSocialLoginArgs',
    'WorkspaceFacebookSocialLoginArgsDict',
    'WorkspaceGithubSocialLoginArgs',
    'WorkspaceGithubSocialLoginArgsDict',
    'WorkspaceGoogleSocialLoginArgs',
    'WorkspaceGoogleSocialLoginArgsDict',
    'WorkspaceHostedLoginArgs',
    'WorkspaceHostedLoginArgsDict',
    'WorkspaceImpossibleTravelEmailArgs',
    'WorkspaceImpossibleTravelEmailArgsDict',
    'WorkspaceLockoutPolicyArgs',
    'WorkspaceLockoutPolicyArgsDict',
    'WorkspaceMagicCodeEmailArgs',
    'WorkspaceMagicCodeEmailArgsDict',
    'WorkspaceMagicLinkEmailArgs',
    'WorkspaceMagicLinkEmailArgsDict',
    'WorkspaceMfaAuthenticationAppArgs',
    'WorkspaceMfaAuthenticationAppArgsDict',
    'WorkspaceMfaEnrollEmailArgs',
    'WorkspaceMfaEnrollEmailArgsDict',
    'WorkspaceMfaOtcEmailArgs',
    'WorkspaceMfaOtcEmailArgsDict',
    'WorkspaceMfaPolicyArgs',
    'WorkspaceMfaPolicyArgsDict',
    'WorkspaceMfaRecoveryCodeEmailArgs',
    'WorkspaceMfaRecoveryCodeEmailArgsDict',
    'WorkspaceMfaUnenrollEmailArgs',
    'WorkspaceMfaUnenrollEmailArgsDict',
    'WorkspaceMicrosoftSocialLoginArgs',
    'WorkspaceMicrosoftSocialLoginArgsDict',
    'WorkspaceNewDeviceConnectedEmailArgs',
    'WorkspaceNewDeviceConnectedEmailArgsDict',
    'WorkspaceNewMfaMethodEmailArgs',
    'WorkspaceNewMfaMethodEmailArgsDict',
    'WorkspaceOidcArgs',
    'WorkspaceOidcArgsDict',
    'WorkspacePasswordPolicyArgs',
    'WorkspacePasswordPolicyArgsDict',
    'WorkspacePwnedPasswordEmailArgs',
    'WorkspacePwnedPasswordEmailArgsDict',
    'WorkspaceRemoveMfaMethodEmailArgs',
    'WorkspaceRemoveMfaMethodEmailArgsDict',
    'WorkspaceResetPasswordEmailArgs',
    'WorkspaceResetPasswordEmailArgsDict',
    'WorkspaceResetPhoneNumberEmailArgs',
    'WorkspaceResetPhoneNumberEmailArgsDict',
    'WorkspaceSamlArgs',
    'WorkspaceSamlArgsDict',
    'WorkspaceSmsAuthenticationEnabledEmailArgs',
    'WorkspaceSmsAuthenticationEnabledEmailArgsDict',
    'WorkspaceSsoDomainPolicyArgs',
    'WorkspaceSsoDomainPolicyArgsDict',
    'WorkspaceSsoMultiTenantPolicyArgs',
    'WorkspaceSsoMultiTenantPolicyArgsDict',
    'WorkspaceSuspiciousIpEmailArgs',
    'WorkspaceSuspiciousIpEmailArgsDict',
    'WorkspaceUserActivationEmailArgs',
    'WorkspaceUserActivationEmailArgsDict',
    'WorkspaceUserInvitationEmailArgs',
    'WorkspaceUserInvitationEmailArgsDict',
    'WorkspaceUserUsedInvitationEmailArgs',
    'WorkspaceUserUsedInvitationEmailArgsDict',
]

MYPY = False

if not MYPY:
    class WorkspaceAdminPortalArgsDict(TypedDict):
        enable_account_settings: pulumi.Input[bool]
        """
        Enable access to account settings in the admin portal.
        """
        enable_api_tokens: pulumi.Input[bool]
        """
        Enable access to API tokens in the admin portal.
        """
        enable_audit_logs: pulumi.Input[bool]
        """
        Enable access to audit logs in the admin portal.
        """
        enable_groups: pulumi.Input[bool]
        """
        Enable access to groups in the admin portal.
        """
        enable_personal_api_tokens: pulumi.Input[bool]
        """
        Enable access to personal API tokens in the admin portal.
        """
        enable_privacy: pulumi.Input[bool]
        """
        Enable access to privacy settings in the admin portal.
        """
        enable_profile: pulumi.Input[bool]
        """
        Enable access to profile settings in the admin portal.
        """
        enable_provisioning: pulumi.Input[bool]
        """
        Enable access to provisioning settings in the admin portal.
        """
        enable_roles: pulumi.Input[bool]
        """
        Enable access to roles and permissions in the admin portal.
        """
        enable_security: pulumi.Input[bool]
        """
        Enable access to security settings in the admin portal.
        """
        enable_sso: pulumi.Input[bool]
        """
        Enable access to SSO settings in the admin portal.
        """
        enable_subscriptions: pulumi.Input[bool]
        """
        Enable access to subscription settings in the admin portal.
        """
        enable_usage: pulumi.Input[bool]
        """
        Enable access to usage information in the admin portal.
        """
        enable_users: pulumi.Input[bool]
        """
        Enable access to user management in the admin portal.
        """
        enable_webhooks: pulumi.Input[bool]
        """
        Enable access to webhooks in the admin portal.
        """
        palette: NotRequired[pulumi.Input['WorkspaceAdminPortalPaletteArgsDict']]
        """
        Configures the color palette for the admin portal.
        """
        palette_admin_portal: NotRequired[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalArgsDict']]
        """
        Configures the color palette for the admin portal.
        """
        palette_login_box: NotRequired[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxArgsDict']]
        """
        Configures the color palette for the admin portal.
        """
elif False:
    WorkspaceAdminPortalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalArgs:
    def __init__(__self__, *,
                 enable_account_settings: pulumi.Input[bool],
                 enable_api_tokens: pulumi.Input[bool],
                 enable_audit_logs: pulumi.Input[bool],
                 enable_groups: pulumi.Input[bool],
                 enable_personal_api_tokens: pulumi.Input[bool],
                 enable_privacy: pulumi.Input[bool],
                 enable_profile: pulumi.Input[bool],
                 enable_provisioning: pulumi.Input[bool],
                 enable_roles: pulumi.Input[bool],
                 enable_security: pulumi.Input[bool],
                 enable_sso: pulumi.Input[bool],
                 enable_subscriptions: pulumi.Input[bool],
                 enable_usage: pulumi.Input[bool],
                 enable_users: pulumi.Input[bool],
                 enable_webhooks: pulumi.Input[bool],
                 palette: Optional[pulumi.Input['WorkspaceAdminPortalPaletteArgs']] = None,
                 palette_admin_portal: Optional[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalArgs']] = None,
                 palette_login_box: Optional[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxArgs']] = None):
        """
        :param pulumi.Input[bool] enable_account_settings: Enable access to account settings in the admin portal.
        :param pulumi.Input[bool] enable_api_tokens: Enable access to API tokens in the admin portal.
        :param pulumi.Input[bool] enable_audit_logs: Enable access to audit logs in the admin portal.
        :param pulumi.Input[bool] enable_groups: Enable access to groups in the admin portal.
        :param pulumi.Input[bool] enable_personal_api_tokens: Enable access to personal API tokens in the admin portal.
        :param pulumi.Input[bool] enable_privacy: Enable access to privacy settings in the admin portal.
        :param pulumi.Input[bool] enable_profile: Enable access to profile settings in the admin portal.
        :param pulumi.Input[bool] enable_provisioning: Enable access to provisioning settings in the admin portal.
        :param pulumi.Input[bool] enable_roles: Enable access to roles and permissions in the admin portal.
        :param pulumi.Input[bool] enable_security: Enable access to security settings in the admin portal.
        :param pulumi.Input[bool] enable_sso: Enable access to SSO settings in the admin portal.
        :param pulumi.Input[bool] enable_subscriptions: Enable access to subscription settings in the admin portal.
        :param pulumi.Input[bool] enable_usage: Enable access to usage information in the admin portal.
        :param pulumi.Input[bool] enable_users: Enable access to user management in the admin portal.
        :param pulumi.Input[bool] enable_webhooks: Enable access to webhooks in the admin portal.
        :param pulumi.Input['WorkspaceAdminPortalPaletteArgs'] palette: Configures the color palette for the admin portal.
        :param pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalArgs'] palette_admin_portal: Configures the color palette for the admin portal.
        :param pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxArgs'] palette_login_box: Configures the color palette for the admin portal.
        """
        pulumi.set(__self__, "enable_account_settings", enable_account_settings)
        pulumi.set(__self__, "enable_api_tokens", enable_api_tokens)
        pulumi.set(__self__, "enable_audit_logs", enable_audit_logs)
        pulumi.set(__self__, "enable_groups", enable_groups)
        pulumi.set(__self__, "enable_personal_api_tokens", enable_personal_api_tokens)
        pulumi.set(__self__, "enable_privacy", enable_privacy)
        pulumi.set(__self__, "enable_profile", enable_profile)
        pulumi.set(__self__, "enable_provisioning", enable_provisioning)
        pulumi.set(__self__, "enable_roles", enable_roles)
        pulumi.set(__self__, "enable_security", enable_security)
        pulumi.set(__self__, "enable_sso", enable_sso)
        pulumi.set(__self__, "enable_subscriptions", enable_subscriptions)
        pulumi.set(__self__, "enable_usage", enable_usage)
        pulumi.set(__self__, "enable_users", enable_users)
        pulumi.set(__self__, "enable_webhooks", enable_webhooks)
        if palette is not None:
            warnings.warn("""Use `palette_admin_portal Or/And palette_login_box` instead.""", DeprecationWarning)
            pulumi.log.warn("""palette is deprecated: Use `palette_admin_portal Or/And palette_login_box` instead.""")
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_admin_portal is not None:
            pulumi.set(__self__, "palette_admin_portal", palette_admin_portal)
        if palette_login_box is not None:
            pulumi.set(__self__, "palette_login_box", palette_login_box)

    @property
    @pulumi.getter(name="enableAccountSettings")
    def enable_account_settings(self) -> pulumi.Input[bool]:
        """
        Enable access to account settings in the admin portal.
        """
        return pulumi.get(self, "enable_account_settings")

    @enable_account_settings.setter
    def enable_account_settings(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_account_settings", value)

    @property
    @pulumi.getter(name="enableApiTokens")
    def enable_api_tokens(self) -> pulumi.Input[bool]:
        """
        Enable access to API tokens in the admin portal.
        """
        return pulumi.get(self, "enable_api_tokens")

    @enable_api_tokens.setter
    def enable_api_tokens(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_api_tokens", value)

    @property
    @pulumi.getter(name="enableAuditLogs")
    def enable_audit_logs(self) -> pulumi.Input[bool]:
        """
        Enable access to audit logs in the admin portal.
        """
        return pulumi.get(self, "enable_audit_logs")

    @enable_audit_logs.setter
    def enable_audit_logs(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_audit_logs", value)

    @property
    @pulumi.getter(name="enableGroups")
    def enable_groups(self) -> pulumi.Input[bool]:
        """
        Enable access to groups in the admin portal.
        """
        return pulumi.get(self, "enable_groups")

    @enable_groups.setter
    def enable_groups(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_groups", value)

    @property
    @pulumi.getter(name="enablePersonalApiTokens")
    def enable_personal_api_tokens(self) -> pulumi.Input[bool]:
        """
        Enable access to personal API tokens in the admin portal.
        """
        return pulumi.get(self, "enable_personal_api_tokens")

    @enable_personal_api_tokens.setter
    def enable_personal_api_tokens(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_personal_api_tokens", value)

    @property
    @pulumi.getter(name="enablePrivacy")
    def enable_privacy(self) -> pulumi.Input[bool]:
        """
        Enable access to privacy settings in the admin portal.
        """
        return pulumi.get(self, "enable_privacy")

    @enable_privacy.setter
    def enable_privacy(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_privacy", value)

    @property
    @pulumi.getter(name="enableProfile")
    def enable_profile(self) -> pulumi.Input[bool]:
        """
        Enable access to profile settings in the admin portal.
        """
        return pulumi.get(self, "enable_profile")

    @enable_profile.setter
    def enable_profile(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_profile", value)

    @property
    @pulumi.getter(name="enableProvisioning")
    def enable_provisioning(self) -> pulumi.Input[bool]:
        """
        Enable access to provisioning settings in the admin portal.
        """
        return pulumi.get(self, "enable_provisioning")

    @enable_provisioning.setter
    def enable_provisioning(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_provisioning", value)

    @property
    @pulumi.getter(name="enableRoles")
    def enable_roles(self) -> pulumi.Input[bool]:
        """
        Enable access to roles and permissions in the admin portal.
        """
        return pulumi.get(self, "enable_roles")

    @enable_roles.setter
    def enable_roles(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_roles", value)

    @property
    @pulumi.getter(name="enableSecurity")
    def enable_security(self) -> pulumi.Input[bool]:
        """
        Enable access to security settings in the admin portal.
        """
        return pulumi.get(self, "enable_security")

    @enable_security.setter
    def enable_security(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_security", value)

    @property
    @pulumi.getter(name="enableSso")
    def enable_sso(self) -> pulumi.Input[bool]:
        """
        Enable access to SSO settings in the admin portal.
        """
        return pulumi.get(self, "enable_sso")

    @enable_sso.setter
    def enable_sso(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_sso", value)

    @property
    @pulumi.getter(name="enableSubscriptions")
    def enable_subscriptions(self) -> pulumi.Input[bool]:
        """
        Enable access to subscription settings in the admin portal.
        """
        return pulumi.get(self, "enable_subscriptions")

    @enable_subscriptions.setter
    def enable_subscriptions(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_subscriptions", value)

    @property
    @pulumi.getter(name="enableUsage")
    def enable_usage(self) -> pulumi.Input[bool]:
        """
        Enable access to usage information in the admin portal.
        """
        return pulumi.get(self, "enable_usage")

    @enable_usage.setter
    def enable_usage(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_usage", value)

    @property
    @pulumi.getter(name="enableUsers")
    def enable_users(self) -> pulumi.Input[bool]:
        """
        Enable access to user management in the admin portal.
        """
        return pulumi.get(self, "enable_users")

    @enable_users.setter
    def enable_users(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_users", value)

    @property
    @pulumi.getter(name="enableWebhooks")
    def enable_webhooks(self) -> pulumi.Input[bool]:
        """
        Enable access to webhooks in the admin portal.
        """
        return pulumi.get(self, "enable_webhooks")

    @enable_webhooks.setter
    def enable_webhooks(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_webhooks", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use `palette_admin_portal Or/And palette_login_box` instead.""")
    def palette(self) -> Optional[pulumi.Input['WorkspaceAdminPortalPaletteArgs']]:
        """
        Configures the color palette for the admin portal.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input['WorkspaceAdminPortalPaletteArgs']]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteAdminPortal")
    def palette_admin_portal(self) -> Optional[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalArgs']]:
        """
        Configures the color palette for the admin portal.
        """
        return pulumi.get(self, "palette_admin_portal")

    @palette_admin_portal.setter
    def palette_admin_portal(self, value: Optional[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalArgs']]):
        pulumi.set(self, "palette_admin_portal", value)

    @property
    @pulumi.getter(name="paletteLoginBox")
    def palette_login_box(self) -> Optional[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxArgs']]:
        """
        Configures the color palette for the admin portal.
        """
        return pulumi.get(self, "palette_login_box")

    @palette_login_box.setter
    def palette_login_box(self, value: Optional[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxArgs']]):
        pulumi.set(self, "palette_login_box", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteArgsDict(TypedDict):
        errors: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteErrorArgsDict']]]]
        """
        Error color.
        """
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteInfoArgsDict']]]]
        """
        Info color.
        """
        primaries: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPalettePrimaryArgsDict']]]]
        """
        Primary color.
        """
        secondaries: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSecondaryArgsDict']]]]
        """
        Secondary color.
        """
        successes: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSuccessArgsDict']]]]
        """
        Success color.
        """
        warnings: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteWarningArgsDict']]]]
        """
        Warning color.
        """
elif False:
    WorkspaceAdminPortalPaletteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteArgs:
    def __init__(__self__, *,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteErrorArgs']]]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteInfoArgs']]]] = None,
                 primaries: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPalettePrimaryArgs']]]] = None,
                 secondaries: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSecondaryArgs']]]] = None,
                 successes: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSuccessArgs']]]] = None,
                 warnings: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteWarningArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteErrorArgs']]] errors: Error color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteInfoArgs']]] infos: Info color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPalettePrimaryArgs']]] primaries: Primary color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSecondaryArgs']]] secondaries: Secondary color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSuccessArgs']]] successes: Success color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteWarningArgs']]] warnings: Warning color.
        """
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if primaries is not None:
            pulumi.set(__self__, "primaries", primaries)
        if secondaries is not None:
            pulumi.set(__self__, "secondaries", secondaries)
        if successes is not None:
            pulumi.set(__self__, "successes", successes)
        if warnings is not None:
            pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteErrorArgs']]]]:
        """
        Error color.
        """
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteErrorArgs']]]]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteInfoArgs']]]]:
        """
        Info color.
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def primaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPalettePrimaryArgs']]]]:
        """
        Primary color.
        """
        return pulumi.get(self, "primaries")

    @primaries.setter
    def primaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPalettePrimaryArgs']]]]):
        pulumi.set(self, "primaries", value)

    @property
    @pulumi.getter
    def secondaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSecondaryArgs']]]]:
        """
        Secondary color.
        """
        return pulumi.get(self, "secondaries")

    @secondaries.setter
    def secondaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSecondaryArgs']]]]):
        pulumi.set(self, "secondaries", value)

    @property
    @pulumi.getter
    def successes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSuccessArgs']]]]:
        """
        Success color.
        """
        return pulumi.get(self, "successes")

    @successes.setter
    def successes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSuccessArgs']]]]):
        pulumi.set(self, "successes", value)

    @property
    @pulumi.getter
    def warnings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteWarningArgs']]]]:
        """
        Warning color.
        """
        return pulumi.get(self, "warnings")

    @warnings.setter
    def warnings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteWarningArgs']]]]):
        pulumi.set(self, "warnings", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteAdminPortalArgsDict(TypedDict):
        errors: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalErrorArgsDict']]]]
        """
        Error color.
        """
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalInfoArgsDict']]]]
        """
        Info color.
        """
        primaries: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalPrimaryArgsDict']]]]
        """
        Primary color.
        """
        secondaries: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalSecondaryArgsDict']]]]
        """
        Secondary color.
        """
        successes: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalSuccessArgsDict']]]]
        """
        Success color.
        """
        warnings: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalWarningArgsDict']]]]
        """
        Warning color.
        """
elif False:
    WorkspaceAdminPortalPaletteAdminPortalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteAdminPortalArgs:
    def __init__(__self__, *,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalErrorArgs']]]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalInfoArgs']]]] = None,
                 primaries: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalPrimaryArgs']]]] = None,
                 secondaries: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalSecondaryArgs']]]] = None,
                 successes: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalSuccessArgs']]]] = None,
                 warnings: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalWarningArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalErrorArgs']]] errors: Error color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalInfoArgs']]] infos: Info color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalPrimaryArgs']]] primaries: Primary color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalSecondaryArgs']]] secondaries: Secondary color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalSuccessArgs']]] successes: Success color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalWarningArgs']]] warnings: Warning color.
        """
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if primaries is not None:
            pulumi.set(__self__, "primaries", primaries)
        if secondaries is not None:
            pulumi.set(__self__, "secondaries", secondaries)
        if successes is not None:
            pulumi.set(__self__, "successes", successes)
        if warnings is not None:
            pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalErrorArgs']]]]:
        """
        Error color.
        """
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalErrorArgs']]]]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalInfoArgs']]]]:
        """
        Info color.
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def primaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalPrimaryArgs']]]]:
        """
        Primary color.
        """
        return pulumi.get(self, "primaries")

    @primaries.setter
    def primaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalPrimaryArgs']]]]):
        pulumi.set(self, "primaries", value)

    @property
    @pulumi.getter
    def secondaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalSecondaryArgs']]]]:
        """
        Secondary color.
        """
        return pulumi.get(self, "secondaries")

    @secondaries.setter
    def secondaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalSecondaryArgs']]]]):
        pulumi.set(self, "secondaries", value)

    @property
    @pulumi.getter
    def successes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalSuccessArgs']]]]:
        """
        Success color.
        """
        return pulumi.get(self, "successes")

    @successes.setter
    def successes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalSuccessArgs']]]]):
        pulumi.set(self, "successes", value)

    @property
    @pulumi.getter
    def warnings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalWarningArgs']]]]:
        """
        Warning color.
        """
        return pulumi.get(self, "warnings")

    @warnings.setter
    def warnings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteAdminPortalWarningArgs']]]]):
        pulumi.set(self, "warnings", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteAdminPortalErrorArgsDict(TypedDict):
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteAdminPortalErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteAdminPortalErrorArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteAdminPortalInfoArgsDict(TypedDict):
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteAdminPortalInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteAdminPortalInfoArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteAdminPortalPrimaryArgsDict(TypedDict):
        active: pulumi.Input[str]
        """
        active color.
        """
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        hover: pulumi.Input[str]
        """
        hover color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteAdminPortalPrimaryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteAdminPortalPrimaryArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[str],
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 hover: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] active: active color.
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] hover: hover color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "hover", hover)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[str]:
        """
        active color.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[str]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def hover(self) -> pulumi.Input[str]:
        """
        hover color.
        """
        return pulumi.get(self, "hover")

    @hover.setter
    def hover(self, value: pulumi.Input[str]):
        pulumi.set(self, "hover", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteAdminPortalSecondaryArgsDict(TypedDict):
        active: pulumi.Input[str]
        """
        active color.
        """
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        hover: pulumi.Input[str]
        """
        hover color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteAdminPortalSecondaryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteAdminPortalSecondaryArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[str],
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 hover: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] active: active color.
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] hover: hover color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "hover", hover)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[str]:
        """
        active color.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[str]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def hover(self) -> pulumi.Input[str]:
        """
        hover color.
        """
        return pulumi.get(self, "hover")

    @hover.setter
    def hover(self, value: pulumi.Input[str]):
        pulumi.set(self, "hover", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteAdminPortalSuccessArgsDict(TypedDict):
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteAdminPortalSuccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteAdminPortalSuccessArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteAdminPortalWarningArgsDict(TypedDict):
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteAdminPortalWarningArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteAdminPortalWarningArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteErrorArgsDict(TypedDict):
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteErrorArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteInfoArgsDict(TypedDict):
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteInfoArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteLoginBoxArgsDict(TypedDict):
        errors: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxErrorArgsDict']]]]
        """
        Error color.
        """
        infos: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxInfoArgsDict']]]]
        """
        Info color.
        """
        primaries: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxPrimaryArgsDict']]]]
        """
        Primary color.
        """
        secondaries: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxSecondaryArgsDict']]]]
        """
        Secondary color.
        """
        successes: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxSuccessArgsDict']]]]
        """
        Success color.
        """
        warnings: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxWarningArgsDict']]]]
        """
        Warning color.
        """
elif False:
    WorkspaceAdminPortalPaletteLoginBoxArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteLoginBoxArgs:
    def __init__(__self__, *,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxErrorArgs']]]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxInfoArgs']]]] = None,
                 primaries: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxPrimaryArgs']]]] = None,
                 secondaries: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxSecondaryArgs']]]] = None,
                 successes: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxSuccessArgs']]]] = None,
                 warnings: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxWarningArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxErrorArgs']]] errors: Error color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxInfoArgs']]] infos: Info color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxPrimaryArgs']]] primaries: Primary color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxSecondaryArgs']]] secondaries: Secondary color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxSuccessArgs']]] successes: Success color.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxWarningArgs']]] warnings: Warning color.
        """
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if infos is not None:
            pulumi.set(__self__, "infos", infos)
        if primaries is not None:
            pulumi.set(__self__, "primaries", primaries)
        if secondaries is not None:
            pulumi.set(__self__, "secondaries", secondaries)
        if successes is not None:
            pulumi.set(__self__, "successes", successes)
        if warnings is not None:
            pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxErrorArgs']]]]:
        """
        Error color.
        """
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxErrorArgs']]]]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxInfoArgs']]]]:
        """
        Info color.
        """
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def primaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxPrimaryArgs']]]]:
        """
        Primary color.
        """
        return pulumi.get(self, "primaries")

    @primaries.setter
    def primaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxPrimaryArgs']]]]):
        pulumi.set(self, "primaries", value)

    @property
    @pulumi.getter
    def secondaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxSecondaryArgs']]]]:
        """
        Secondary color.
        """
        return pulumi.get(self, "secondaries")

    @secondaries.setter
    def secondaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxSecondaryArgs']]]]):
        pulumi.set(self, "secondaries", value)

    @property
    @pulumi.getter
    def successes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxSuccessArgs']]]]:
        """
        Success color.
        """
        return pulumi.get(self, "successes")

    @successes.setter
    def successes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxSuccessArgs']]]]):
        pulumi.set(self, "successes", value)

    @property
    @pulumi.getter
    def warnings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxWarningArgs']]]]:
        """
        Warning color.
        """
        return pulumi.get(self, "warnings")

    @warnings.setter
    def warnings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteLoginBoxWarningArgs']]]]):
        pulumi.set(self, "warnings", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteLoginBoxErrorArgsDict(TypedDict):
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteLoginBoxErrorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteLoginBoxErrorArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteLoginBoxInfoArgsDict(TypedDict):
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteLoginBoxInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteLoginBoxInfoArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteLoginBoxPrimaryArgsDict(TypedDict):
        active: pulumi.Input[str]
        """
        active color.
        """
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        hover: pulumi.Input[str]
        """
        hover color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteLoginBoxPrimaryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteLoginBoxPrimaryArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[str],
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 hover: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] active: active color.
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] hover: hover color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "hover", hover)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[str]:
        """
        active color.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[str]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def hover(self) -> pulumi.Input[str]:
        """
        hover color.
        """
        return pulumi.get(self, "hover")

    @hover.setter
    def hover(self, value: pulumi.Input[str]):
        pulumi.set(self, "hover", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteLoginBoxSecondaryArgsDict(TypedDict):
        active: pulumi.Input[str]
        """
        active color.
        """
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        hover: pulumi.Input[str]
        """
        hover color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteLoginBoxSecondaryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteLoginBoxSecondaryArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[str],
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 hover: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] active: active color.
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] hover: hover color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "hover", hover)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[str]:
        """
        active color.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[str]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def hover(self) -> pulumi.Input[str]:
        """
        hover color.
        """
        return pulumi.get(self, "hover")

    @hover.setter
    def hover(self, value: pulumi.Input[str]):
        pulumi.set(self, "hover", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteLoginBoxSuccessArgsDict(TypedDict):
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteLoginBoxSuccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteLoginBoxSuccessArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteLoginBoxWarningArgsDict(TypedDict):
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteLoginBoxWarningArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteLoginBoxWarningArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPalettePrimaryArgsDict(TypedDict):
        active: pulumi.Input[str]
        """
        active color.
        """
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        hover: pulumi.Input[str]
        """
        hover color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPalettePrimaryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPalettePrimaryArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[str],
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 hover: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] active: active color.
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] hover: hover color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "hover", hover)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[str]:
        """
        active color.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[str]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def hover(self) -> pulumi.Input[str]:
        """
        hover color.
        """
        return pulumi.get(self, "hover")

    @hover.setter
    def hover(self, value: pulumi.Input[str]):
        pulumi.set(self, "hover", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteSecondaryArgsDict(TypedDict):
        active: pulumi.Input[str]
        """
        active color.
        """
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        hover: pulumi.Input[str]
        """
        hover color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteSecondaryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteSecondaryArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[str],
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 hover: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] active: active color.
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] hover: hover color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "hover", hover)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[str]:
        """
        active color.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[str]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def hover(self) -> pulumi.Input[str]:
        """
        hover color.
        """
        return pulumi.get(self, "hover")

    @hover.setter
    def hover(self, value: pulumi.Input[str]):
        pulumi.set(self, "hover", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteSuccessArgsDict(TypedDict):
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteSuccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteSuccessArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAdminPortalPaletteWarningArgsDict(TypedDict):
        contrast_text: pulumi.Input[str]
        """
        contrast_text color.
        """
        dark: pulumi.Input[str]
        """
        dark color.
        """
        light: pulumi.Input[str]
        """
        light color.
        """
        main: pulumi.Input[str]
        """
        main color.
        """
elif False:
    WorkspaceAdminPortalPaletteWarningArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAdminPortalPaletteWarningArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        """
        :param pulumi.Input[str] contrast_text: contrast_text color.
        :param pulumi.Input[str] dark: dark color.
        :param pulumi.Input[str] light: light color.
        :param pulumi.Input[str] main: main color.
        """
        pulumi.set(__self__, "contrast_text", contrast_text)
        pulumi.set(__self__, "dark", dark)
        pulumi.set(__self__, "light", light)
        pulumi.set(__self__, "main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        """
        contrast_text color.
        """
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        """
        dark color.
        """
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        """
        light color.
        """
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        """
        main color.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


if not MYPY:
    class WorkspaceAuthPolicyArgsDict(TypedDict):
        allow_signups: pulumi.Input[bool]
        """
        Whether users are allowed to sign up.
        """
        allow_tenant_invitations: pulumi.Input[bool]
        """
        Allow tenants to invite new users via an invitation link.
        """
        allow_unverified_users: pulumi.Input[bool]
        """
        Whether unverified users are allowed to log in.
        """
        auth_strategy: pulumi.Input[str]
        """
        The authentication strategy to use for people logging in.

        	Must be one of "EmailAndPassword", "Code", "MagicLink", "NoLocalAuthentication", "SmsCode"
        """
        enable_api_tokens: pulumi.Input[bool]
        """
        Whether users can create API tokens.
        """
        enable_roles: pulumi.Input[bool]
        """
        Whether granular roles and permissions are enabled.
        """
        jwt_access_token_expiration: pulumi.Input[int]
        """
        The expiration time for the JWT access tokens issued by Frontegg.
        """
        jwt_refresh_token_expiration: pulumi.Input[int]
        """
        The expiration time for the JWT refresh tokens issued by Frontegg.
        """
        same_site_cookie_policy: pulumi.Input[str]
        """
        The SameSite policy to use for Frontegg cookies.

        	Must be one of "none", "lax", or "strict".
        """
        jwt_algorithm: NotRequired[pulumi.Input[str]]
        """
        The algorithm Frontegg uses to sign JWT tokens.
        """
        jwt_public_key: NotRequired[pulumi.Input[str]]
        """
        The public key that Frontegg uses to sign JWT tokens.
        """
        machine_to_machine_auth_strategy: NotRequired[pulumi.Input[str]]
        """
        Type of tokens users will be able to generate.
        							Must be one of "ClientCredentials" or "AccessToken".
        """
elif False:
    WorkspaceAuthPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceAuthPolicyArgs:
    def __init__(__self__, *,
                 allow_signups: pulumi.Input[bool],
                 allow_tenant_invitations: pulumi.Input[bool],
                 allow_unverified_users: pulumi.Input[bool],
                 auth_strategy: pulumi.Input[str],
                 enable_api_tokens: pulumi.Input[bool],
                 enable_roles: pulumi.Input[bool],
                 jwt_access_token_expiration: pulumi.Input[int],
                 jwt_refresh_token_expiration: pulumi.Input[int],
                 same_site_cookie_policy: pulumi.Input[str],
                 jwt_algorithm: Optional[pulumi.Input[str]] = None,
                 jwt_public_key: Optional[pulumi.Input[str]] = None,
                 machine_to_machine_auth_strategy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] allow_signups: Whether users are allowed to sign up.
        :param pulumi.Input[bool] allow_tenant_invitations: Allow tenants to invite new users via an invitation link.
        :param pulumi.Input[bool] allow_unverified_users: Whether unverified users are allowed to log in.
        :param pulumi.Input[str] auth_strategy: The authentication strategy to use for people logging in.
               
               	Must be one of "EmailAndPassword", "Code", "MagicLink", "NoLocalAuthentication", "SmsCode"
        :param pulumi.Input[bool] enable_api_tokens: Whether users can create API tokens.
        :param pulumi.Input[bool] enable_roles: Whether granular roles and permissions are enabled.
        :param pulumi.Input[int] jwt_access_token_expiration: The expiration time for the JWT access tokens issued by Frontegg.
        :param pulumi.Input[int] jwt_refresh_token_expiration: The expiration time for the JWT refresh tokens issued by Frontegg.
        :param pulumi.Input[str] same_site_cookie_policy: The SameSite policy to use for Frontegg cookies.
               
               	Must be one of "none", "lax", or "strict".
        :param pulumi.Input[str] jwt_algorithm: The algorithm Frontegg uses to sign JWT tokens.
        :param pulumi.Input[str] jwt_public_key: The public key that Frontegg uses to sign JWT tokens.
        :param pulumi.Input[str] machine_to_machine_auth_strategy: Type of tokens users will be able to generate.
               							Must be one of "ClientCredentials" or "AccessToken".
        """
        pulumi.set(__self__, "allow_signups", allow_signups)
        pulumi.set(__self__, "allow_tenant_invitations", allow_tenant_invitations)
        pulumi.set(__self__, "allow_unverified_users", allow_unverified_users)
        pulumi.set(__self__, "auth_strategy", auth_strategy)
        pulumi.set(__self__, "enable_api_tokens", enable_api_tokens)
        pulumi.set(__self__, "enable_roles", enable_roles)
        pulumi.set(__self__, "jwt_access_token_expiration", jwt_access_token_expiration)
        pulumi.set(__self__, "jwt_refresh_token_expiration", jwt_refresh_token_expiration)
        pulumi.set(__self__, "same_site_cookie_policy", same_site_cookie_policy)
        if jwt_algorithm is not None:
            pulumi.set(__self__, "jwt_algorithm", jwt_algorithm)
        if jwt_public_key is not None:
            pulumi.set(__self__, "jwt_public_key", jwt_public_key)
        if machine_to_machine_auth_strategy is not None:
            pulumi.set(__self__, "machine_to_machine_auth_strategy", machine_to_machine_auth_strategy)

    @property
    @pulumi.getter(name="allowSignups")
    def allow_signups(self) -> pulumi.Input[bool]:
        """
        Whether users are allowed to sign up.
        """
        return pulumi.get(self, "allow_signups")

    @allow_signups.setter
    def allow_signups(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_signups", value)

    @property
    @pulumi.getter(name="allowTenantInvitations")
    def allow_tenant_invitations(self) -> pulumi.Input[bool]:
        """
        Allow tenants to invite new users via an invitation link.
        """
        return pulumi.get(self, "allow_tenant_invitations")

    @allow_tenant_invitations.setter
    def allow_tenant_invitations(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_tenant_invitations", value)

    @property
    @pulumi.getter(name="allowUnverifiedUsers")
    def allow_unverified_users(self) -> pulumi.Input[bool]:
        """
        Whether unverified users are allowed to log in.
        """
        return pulumi.get(self, "allow_unverified_users")

    @allow_unverified_users.setter
    def allow_unverified_users(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_unverified_users", value)

    @property
    @pulumi.getter(name="authStrategy")
    def auth_strategy(self) -> pulumi.Input[str]:
        """
        The authentication strategy to use for people logging in.

        	Must be one of "EmailAndPassword", "Code", "MagicLink", "NoLocalAuthentication", "SmsCode"
        """
        return pulumi.get(self, "auth_strategy")

    @auth_strategy.setter
    def auth_strategy(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_strategy", value)

    @property
    @pulumi.getter(name="enableApiTokens")
    def enable_api_tokens(self) -> pulumi.Input[bool]:
        """
        Whether users can create API tokens.
        """
        return pulumi.get(self, "enable_api_tokens")

    @enable_api_tokens.setter
    def enable_api_tokens(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_api_tokens", value)

    @property
    @pulumi.getter(name="enableRoles")
    def enable_roles(self) -> pulumi.Input[bool]:
        """
        Whether granular roles and permissions are enabled.
        """
        return pulumi.get(self, "enable_roles")

    @enable_roles.setter
    def enable_roles(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_roles", value)

    @property
    @pulumi.getter(name="jwtAccessTokenExpiration")
    def jwt_access_token_expiration(self) -> pulumi.Input[int]:
        """
        The expiration time for the JWT access tokens issued by Frontegg.
        """
        return pulumi.get(self, "jwt_access_token_expiration")

    @jwt_access_token_expiration.setter
    def jwt_access_token_expiration(self, value: pulumi.Input[int]):
        pulumi.set(self, "jwt_access_token_expiration", value)

    @property
    @pulumi.getter(name="jwtRefreshTokenExpiration")
    def jwt_refresh_token_expiration(self) -> pulumi.Input[int]:
        """
        The expiration time for the JWT refresh tokens issued by Frontegg.
        """
        return pulumi.get(self, "jwt_refresh_token_expiration")

    @jwt_refresh_token_expiration.setter
    def jwt_refresh_token_expiration(self, value: pulumi.Input[int]):
        pulumi.set(self, "jwt_refresh_token_expiration", value)

    @property
    @pulumi.getter(name="sameSiteCookiePolicy")
    def same_site_cookie_policy(self) -> pulumi.Input[str]:
        """
        The SameSite policy to use for Frontegg cookies.

        	Must be one of "none", "lax", or "strict".
        """
        return pulumi.get(self, "same_site_cookie_policy")

    @same_site_cookie_policy.setter
    def same_site_cookie_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "same_site_cookie_policy", value)

    @property
    @pulumi.getter(name="jwtAlgorithm")
    def jwt_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The algorithm Frontegg uses to sign JWT tokens.
        """
        return pulumi.get(self, "jwt_algorithm")

    @jwt_algorithm.setter
    def jwt_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt_algorithm", value)

    @property
    @pulumi.getter(name="jwtPublicKey")
    def jwt_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        The public key that Frontegg uses to sign JWT tokens.
        """
        return pulumi.get(self, "jwt_public_key")

    @jwt_public_key.setter
    def jwt_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt_public_key", value)

    @property
    @pulumi.getter(name="machineToMachineAuthStrategy")
    def machine_to_machine_auth_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Type of tokens users will be able to generate.
        							Must be one of "ClientCredentials" or "AccessToken".
        """
        return pulumi.get(self, "machine_to_machine_auth_strategy")

    @machine_to_machine_auth_strategy.setter
    def machine_to_machine_auth_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_to_machine_auth_strategy", value)


if not MYPY:
    class WorkspaceBotDetectionEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceBotDetectionEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceBotDetectionEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceBruteForceProtectionEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceBruteForceProtectionEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceBruteForceProtectionEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceBulkTenantsInvitesEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceBulkTenantsInvitesEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceBulkTenantsInvitesEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceCaptchaPolicyArgsDict(TypedDict):
        min_score: pulumi.Input[float]
        """
        The minimum CAPTCHA score to accept. Set to 0.0 to accept all scores.
        """
        secret_key: pulumi.Input[str]
        """
        The reCAPTCHA secret key to use.
        """
        site_key: pulumi.Input[str]
        """
        The reCAPTCHA site key to use.
        """
        ignored_emails: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Email addresses that should be exempt from CAPTCHA checks.
        """
elif False:
    WorkspaceCaptchaPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceCaptchaPolicyArgs:
    def __init__(__self__, *,
                 min_score: pulumi.Input[float],
                 secret_key: pulumi.Input[str],
                 site_key: pulumi.Input[str],
                 ignored_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[float] min_score: The minimum CAPTCHA score to accept. Set to 0.0 to accept all scores.
        :param pulumi.Input[str] secret_key: The reCAPTCHA secret key to use.
        :param pulumi.Input[str] site_key: The reCAPTCHA site key to use.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignored_emails: Email addresses that should be exempt from CAPTCHA checks.
        """
        pulumi.set(__self__, "min_score", min_score)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "site_key", site_key)
        if ignored_emails is not None:
            pulumi.set(__self__, "ignored_emails", ignored_emails)

    @property
    @pulumi.getter(name="minScore")
    def min_score(self) -> pulumi.Input[float]:
        """
        The minimum CAPTCHA score to accept. Set to 0.0 to accept all scores.
        """
        return pulumi.get(self, "min_score")

    @min_score.setter
    def min_score(self, value: pulumi.Input[float]):
        pulumi.set(self, "min_score", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        The reCAPTCHA secret key to use.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="siteKey")
    def site_key(self) -> pulumi.Input[str]:
        """
        The reCAPTCHA site key to use.
        """
        return pulumi.get(self, "site_key")

    @site_key.setter
    def site_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_key", value)

    @property
    @pulumi.getter(name="ignoredEmails")
    def ignored_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Email addresses that should be exempt from CAPTCHA checks.
        """
        return pulumi.get(self, "ignored_emails")

    @ignored_emails.setter
    def ignored_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignored_emails", value)


if not MYPY:
    class WorkspaceEmailVerificationEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceEmailVerificationEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceEmailVerificationEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceFacebookSocialLoginArgsDict(TypedDict):
        redirect_url: pulumi.Input[str]
        """
        The URL to redirect to after a successful authentication.
        """
        client_id: NotRequired[pulumi.Input[str]]
        """
        The client ID of the Facebook application to authenticate with. Required when setting **`customised`** parameter to true.
        """
        customised: NotRequired[pulumi.Input[bool]]
        """
        Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        """
        secret: NotRequired[pulumi.Input[str]]
        """
        The secret associated with the Facebook application. Required when setting **`customised`** parameter to true.
        """
elif False:
    WorkspaceFacebookSocialLoginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceFacebookSocialLoginArgs:
    def __init__(__self__, *,
                 redirect_url: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 customised: Optional[pulumi.Input[bool]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] redirect_url: The URL to redirect to after a successful authentication.
        :param pulumi.Input[str] client_id: The client ID of the Facebook application to authenticate with. Required when setting **`customised`** parameter to true.
        :param pulumi.Input[bool] customised: Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        :param pulumi.Input[str] secret: The secret associated with the Facebook application. Required when setting **`customised`** parameter to true.
        """
        pulumi.set(__self__, "redirect_url", redirect_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if customised is not None:
            pulumi.set(__self__, "customised", customised)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Input[str]:
        """
        The URL to redirect to after a successful authentication.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The client ID of the Facebook application to authenticate with. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def customised(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        """
        return pulumi.get(self, "customised")

    @customised.setter
    def customised(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "customised", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        The secret associated with the Facebook application. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


if not MYPY:
    class WorkspaceGithubSocialLoginArgsDict(TypedDict):
        redirect_url: pulumi.Input[str]
        """
        The URL to redirect to after a successful authentication.
        """
        client_id: NotRequired[pulumi.Input[str]]
        """
        The client ID of the GitHub application to authenticate with. Required when setting **`customised`** parameter to true.
        """
        customised: NotRequired[pulumi.Input[bool]]
        """
        Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        """
        secret: NotRequired[pulumi.Input[str]]
        """
        The secret associated with the GitHub application. Required when setting **`customised`** parameter to true.
        """
elif False:
    WorkspaceGithubSocialLoginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceGithubSocialLoginArgs:
    def __init__(__self__, *,
                 redirect_url: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 customised: Optional[pulumi.Input[bool]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] redirect_url: The URL to redirect to after a successful authentication.
        :param pulumi.Input[str] client_id: The client ID of the GitHub application to authenticate with. Required when setting **`customised`** parameter to true.
        :param pulumi.Input[bool] customised: Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        :param pulumi.Input[str] secret: The secret associated with the GitHub application. Required when setting **`customised`** parameter to true.
        """
        pulumi.set(__self__, "redirect_url", redirect_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if customised is not None:
            pulumi.set(__self__, "customised", customised)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Input[str]:
        """
        The URL to redirect to after a successful authentication.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The client ID of the GitHub application to authenticate with. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def customised(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        """
        return pulumi.get(self, "customised")

    @customised.setter
    def customised(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "customised", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        The secret associated with the GitHub application. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


if not MYPY:
    class WorkspaceGoogleSocialLoginArgsDict(TypedDict):
        redirect_url: pulumi.Input[str]
        """
        The URL to redirect to after a successful authentication.
        """
        client_id: NotRequired[pulumi.Input[str]]
        """
        The client ID of the Google application to authenticate with. Required when setting **`customised`** parameter to true.
        """
        customised: NotRequired[pulumi.Input[bool]]
        """
        Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        """
        secret: NotRequired[pulumi.Input[str]]
        """
        The secret associated with the Google application. Required when setting **`customised`** parameter to true.
        """
elif False:
    WorkspaceGoogleSocialLoginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceGoogleSocialLoginArgs:
    def __init__(__self__, *,
                 redirect_url: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 customised: Optional[pulumi.Input[bool]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] redirect_url: The URL to redirect to after a successful authentication.
        :param pulumi.Input[str] client_id: The client ID of the Google application to authenticate with. Required when setting **`customised`** parameter to true.
        :param pulumi.Input[bool] customised: Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        :param pulumi.Input[str] secret: The secret associated with the Google application. Required when setting **`customised`** parameter to true.
        """
        pulumi.set(__self__, "redirect_url", redirect_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if customised is not None:
            pulumi.set(__self__, "customised", customised)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Input[str]:
        """
        The URL to redirect to after a successful authentication.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The client ID of the Google application to authenticate with. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def customised(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        """
        return pulumi.get(self, "customised")

    @customised.setter
    def customised(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "customised", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        The secret associated with the Google application. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


if not MYPY:
    class WorkspaceHostedLoginArgsDict(TypedDict):
        allowed_redirect_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Allowed redirect URLs.
        """
elif False:
    WorkspaceHostedLoginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceHostedLoginArgs:
    def __init__(__self__, *,
                 allowed_redirect_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_redirect_urls: Allowed redirect URLs.
        """
        if allowed_redirect_urls is not None:
            pulumi.set(__self__, "allowed_redirect_urls", allowed_redirect_urls)

    @property
    @pulumi.getter(name="allowedRedirectUrls")
    def allowed_redirect_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allowed redirect URLs.
        """
        return pulumi.get(self, "allowed_redirect_urls")

    @allowed_redirect_urls.setter
    def allowed_redirect_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_redirect_urls", value)


if not MYPY:
    class WorkspaceImpossibleTravelEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceImpossibleTravelEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceImpossibleTravelEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceLockoutPolicyArgsDict(TypedDict):
        max_attempts: pulumi.Input[int]
        """
        The number of failed attempts after which a user will be locked out.
        """
elif False:
    WorkspaceLockoutPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceLockoutPolicyArgs:
    def __init__(__self__, *,
                 max_attempts: pulumi.Input[int]):
        """
        :param pulumi.Input[int] max_attempts: The number of failed attempts after which a user will be locked out.
        """
        pulumi.set(__self__, "max_attempts", max_attempts)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> pulumi.Input[int]:
        """
        The number of failed attempts after which a user will be locked out.
        """
        return pulumi.get(self, "max_attempts")

    @max_attempts.setter
    def max_attempts(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_attempts", value)


if not MYPY:
    class WorkspaceMagicCodeEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceMagicCodeEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceMagicCodeEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceMagicLinkEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceMagicLinkEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceMagicLinkEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceMfaAuthenticationAppArgsDict(TypedDict):
        service_name: pulumi.Input[str]
        """
        The service name to display in the authentication app.
        """
elif False:
    WorkspaceMfaAuthenticationAppArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceMfaAuthenticationAppArgs:
    def __init__(__self__, *,
                 service_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] service_name: The service name to display in the authentication app.
        """
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The service name to display in the authentication app.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)


if not MYPY:
    class WorkspaceMfaEnrollEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceMfaEnrollEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceMfaEnrollEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceMfaOtcEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceMfaOtcEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceMfaOtcEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceMfaPolicyArgsDict(TypedDict):
        allow_remember_device: pulumi.Input[bool]
        """
        Allow users to remember their MFA devices.
        """
        device_expiration: pulumi.Input[int]
        """
        The number of seconds that MFA devices can be remembered for, if allow_remember_my_device is true.
        """
        enforce: pulumi.Input[str]
        """
        Whether to force use of MFA.

        	Must be one of "off", "on", or "unless-saml".
        """
elif False:
    WorkspaceMfaPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceMfaPolicyArgs:
    def __init__(__self__, *,
                 allow_remember_device: pulumi.Input[bool],
                 device_expiration: pulumi.Input[int],
                 enforce: pulumi.Input[str]):
        """
        :param pulumi.Input[bool] allow_remember_device: Allow users to remember their MFA devices.
        :param pulumi.Input[int] device_expiration: The number of seconds that MFA devices can be remembered for, if allow_remember_my_device is true.
        :param pulumi.Input[str] enforce: Whether to force use of MFA.
               
               	Must be one of "off", "on", or "unless-saml".
        """
        pulumi.set(__self__, "allow_remember_device", allow_remember_device)
        pulumi.set(__self__, "device_expiration", device_expiration)
        pulumi.set(__self__, "enforce", enforce)

    @property
    @pulumi.getter(name="allowRememberDevice")
    def allow_remember_device(self) -> pulumi.Input[bool]:
        """
        Allow users to remember their MFA devices.
        """
        return pulumi.get(self, "allow_remember_device")

    @allow_remember_device.setter
    def allow_remember_device(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_remember_device", value)

    @property
    @pulumi.getter(name="deviceExpiration")
    def device_expiration(self) -> pulumi.Input[int]:
        """
        The number of seconds that MFA devices can be remembered for, if allow_remember_my_device is true.
        """
        return pulumi.get(self, "device_expiration")

    @device_expiration.setter
    def device_expiration(self, value: pulumi.Input[int]):
        pulumi.set(self, "device_expiration", value)

    @property
    @pulumi.getter
    def enforce(self) -> pulumi.Input[str]:
        """
        Whether to force use of MFA.

        	Must be one of "off", "on", or "unless-saml".
        """
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: pulumi.Input[str]):
        pulumi.set(self, "enforce", value)


if not MYPY:
    class WorkspaceMfaRecoveryCodeEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceMfaRecoveryCodeEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceMfaRecoveryCodeEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceMfaUnenrollEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceMfaUnenrollEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceMfaUnenrollEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceMicrosoftSocialLoginArgsDict(TypedDict):
        redirect_url: pulumi.Input[str]
        """
        The URL to redirect to after a successful authentication.
        """
        client_id: NotRequired[pulumi.Input[str]]
        """
        The client ID of the Microsoft application to authenticate with. Required when setting **`customised`** parameter to true.
        """
        customised: NotRequired[pulumi.Input[bool]]
        """
        Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        """
        secret: NotRequired[pulumi.Input[str]]
        """
        The secret associated with the Microsoft application. Required when setting **`customised`** parameter to true.
        """
elif False:
    WorkspaceMicrosoftSocialLoginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceMicrosoftSocialLoginArgs:
    def __init__(__self__, *,
                 redirect_url: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 customised: Optional[pulumi.Input[bool]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] redirect_url: The URL to redirect to after a successful authentication.
        :param pulumi.Input[str] client_id: The client ID of the Microsoft application to authenticate with. Required when setting **`customised`** parameter to true.
        :param pulumi.Input[bool] customised: Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        :param pulumi.Input[str] secret: The secret associated with the Microsoft application. Required when setting **`customised`** parameter to true.
        """
        pulumi.set(__self__, "redirect_url", redirect_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if customised is not None:
            pulumi.set(__self__, "customised", customised)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Input[str]:
        """
        The URL to redirect to after a successful authentication.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The client ID of the Microsoft application to authenticate with. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def customised(self) -> Optional[pulumi.Input[bool]]:
        """
        Determine whether the SSO should use customized secret and client ID. When passing true, clientId and secret are also required.
        """
        return pulumi.get(self, "customised")

    @customised.setter
    def customised(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "customised", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        The secret associated with the Microsoft application. Required when setting **`customised`** parameter to true.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


if not MYPY:
    class WorkspaceNewDeviceConnectedEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceNewDeviceConnectedEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceNewDeviceConnectedEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceNewMfaMethodEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceNewMfaMethodEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceNewMfaMethodEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceOidcArgsDict(TypedDict):
        redirect_url: pulumi.Input[str]
        """
        The URL to redirect to after the OIDC exchange.
        """
elif False:
    WorkspaceOidcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceOidcArgs:
    def __init__(__self__, *,
                 redirect_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] redirect_url: The URL to redirect to after the OIDC exchange.
        """
        pulumi.set(__self__, "redirect_url", redirect_url)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Input[str]:
        """
        The URL to redirect to after the OIDC exchange.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_url", value)


if not MYPY:
    class WorkspacePasswordPolicyArgsDict(TypedDict):
        allow_passphrases: pulumi.Input[bool]
        history: pulumi.Input[int]
        """
        The number of historical passwords to prevent users from reusing. Set to zero to disable.
        """
        max_length: pulumi.Input[int]
        """
        The maximum length of a password.
        """
        min_length: pulumi.Input[int]
        """
        The minimum length of a password.
        """
        min_phrase_length: pulumi.Input[int]
        min_tests: pulumi.Input[int]
        """
        The minimum number of strength tests the password must meet.
        """
elif False:
    WorkspacePasswordPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspacePasswordPolicyArgs:
    def __init__(__self__, *,
                 allow_passphrases: pulumi.Input[bool],
                 history: pulumi.Input[int],
                 max_length: pulumi.Input[int],
                 min_length: pulumi.Input[int],
                 min_phrase_length: pulumi.Input[int],
                 min_tests: pulumi.Input[int]):
        """
        :param pulumi.Input[int] history: The number of historical passwords to prevent users from reusing. Set to zero to disable.
        :param pulumi.Input[int] max_length: The maximum length of a password.
        :param pulumi.Input[int] min_length: The minimum length of a password.
        :param pulumi.Input[int] min_tests: The minimum number of strength tests the password must meet.
        """
        pulumi.set(__self__, "allow_passphrases", allow_passphrases)
        pulumi.set(__self__, "history", history)
        pulumi.set(__self__, "max_length", max_length)
        pulumi.set(__self__, "min_length", min_length)
        pulumi.set(__self__, "min_phrase_length", min_phrase_length)
        pulumi.set(__self__, "min_tests", min_tests)

    @property
    @pulumi.getter(name="allowPassphrases")
    def allow_passphrases(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_passphrases")

    @allow_passphrases.setter
    def allow_passphrases(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_passphrases", value)

    @property
    @pulumi.getter
    def history(self) -> pulumi.Input[int]:
        """
        The number of historical passwords to prevent users from reusing. Set to zero to disable.
        """
        return pulumi.get(self, "history")

    @history.setter
    def history(self, value: pulumi.Input[int]):
        pulumi.set(self, "history", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> pulumi.Input[int]:
        """
        The maximum length of a password.
        """
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> pulumi.Input[int]:
        """
        The minimum length of a password.
        """
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="minPhraseLength")
    def min_phrase_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_phrase_length")

    @min_phrase_length.setter
    def min_phrase_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_phrase_length", value)

    @property
    @pulumi.getter(name="minTests")
    def min_tests(self) -> pulumi.Input[int]:
        """
        The minimum number of strength tests the password must meet.
        """
        return pulumi.get(self, "min_tests")

    @min_tests.setter
    def min_tests(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_tests", value)


if not MYPY:
    class WorkspacePwnedPasswordEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspacePwnedPasswordEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspacePwnedPasswordEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceRemoveMfaMethodEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceRemoveMfaMethodEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceRemoveMfaMethodEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceResetPasswordEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceResetPasswordEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceResetPasswordEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceResetPhoneNumberEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceResetPhoneNumberEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceResetPhoneNumberEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceSamlArgsDict(TypedDict):
        acs_url: pulumi.Input[str]
        """
        The ACS URL for the SAML authentication flow.
        """
        sp_entity_id: pulumi.Input[str]
        """
        The name of the service provider that will be displayed to users.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The URL to redirect to after the SAML exchange.
        """
elif False:
    WorkspaceSamlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceSamlArgs:
    def __init__(__self__, *,
                 acs_url: pulumi.Input[str],
                 sp_entity_id: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] acs_url: The ACS URL for the SAML authentication flow.
        :param pulumi.Input[str] sp_entity_id: The name of the service provider that will be displayed to users.
        :param pulumi.Input[str] redirect_url: The URL to redirect to after the SAML exchange.
        """
        pulumi.set(__self__, "acs_url", acs_url)
        pulumi.set(__self__, "sp_entity_id", sp_entity_id)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)

    @property
    @pulumi.getter(name="acsUrl")
    def acs_url(self) -> pulumi.Input[str]:
        """
        The ACS URL for the SAML authentication flow.
        """
        return pulumi.get(self, "acs_url")

    @acs_url.setter
    def acs_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "acs_url", value)

    @property
    @pulumi.getter(name="spEntityId")
    def sp_entity_id(self) -> pulumi.Input[str]:
        """
        The name of the service provider that will be displayed to users.
        """
        return pulumi.get(self, "sp_entity_id")

    @sp_entity_id.setter
    def sp_entity_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sp_entity_id", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to redirect to after the SAML exchange.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)


if not MYPY:
    class WorkspaceSmsAuthenticationEnabledEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceSmsAuthenticationEnabledEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceSmsAuthenticationEnabledEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceSsoDomainPolicyArgsDict(TypedDict):
        allow_verified_users_to_add_domains: NotRequired[pulumi.Input[bool]]
        """
        Whether to allow users to add their own email domain without validating the domain through DNS.
        """
        bypass_domain_cross_validation: NotRequired[pulumi.Input[bool]]
        """
        Whether to allow users to sign in even via SSO even if the associated domain has not been validated through DNS.
        """
        skip_domain_verification: NotRequired[pulumi.Input[bool]]
        """
        Whether to automatically mark new SSO domains as validated, without validating the domain through DNS.
        """
elif False:
    WorkspaceSsoDomainPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceSsoDomainPolicyArgs:
    def __init__(__self__, *,
                 allow_verified_users_to_add_domains: Optional[pulumi.Input[bool]] = None,
                 bypass_domain_cross_validation: Optional[pulumi.Input[bool]] = None,
                 skip_domain_verification: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] allow_verified_users_to_add_domains: Whether to allow users to add their own email domain without validating the domain through DNS.
        :param pulumi.Input[bool] bypass_domain_cross_validation: Whether to allow users to sign in even via SSO even if the associated domain has not been validated through DNS.
        :param pulumi.Input[bool] skip_domain_verification: Whether to automatically mark new SSO domains as validated, without validating the domain through DNS.
        """
        if allow_verified_users_to_add_domains is not None:
            pulumi.set(__self__, "allow_verified_users_to_add_domains", allow_verified_users_to_add_domains)
        if bypass_domain_cross_validation is not None:
            pulumi.set(__self__, "bypass_domain_cross_validation", bypass_domain_cross_validation)
        if skip_domain_verification is not None:
            pulumi.set(__self__, "skip_domain_verification", skip_domain_verification)

    @property
    @pulumi.getter(name="allowVerifiedUsersToAddDomains")
    def allow_verified_users_to_add_domains(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow users to add their own email domain without validating the domain through DNS.
        """
        return pulumi.get(self, "allow_verified_users_to_add_domains")

    @allow_verified_users_to_add_domains.setter
    def allow_verified_users_to_add_domains(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_verified_users_to_add_domains", value)

    @property
    @pulumi.getter(name="bypassDomainCrossValidation")
    def bypass_domain_cross_validation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow users to sign in even via SSO even if the associated domain has not been validated through DNS.
        """
        return pulumi.get(self, "bypass_domain_cross_validation")

    @bypass_domain_cross_validation.setter
    def bypass_domain_cross_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_domain_cross_validation", value)

    @property
    @pulumi.getter(name="skipDomainVerification")
    def skip_domain_verification(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically mark new SSO domains as validated, without validating the domain through DNS.
        """
        return pulumi.get(self, "skip_domain_verification")

    @skip_domain_verification.setter
    def skip_domain_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_domain_verification", value)


if not MYPY:
    class WorkspaceSsoMultiTenantPolicyArgsDict(TypedDict):
        unspecified_tenant_strategy: NotRequired[pulumi.Input[str]]
        """
        Strategy for logging in nonexisting users that match SSO configurations for multiple tenants when no tenant has been specified. Either BLOCK or FIRST_CREATED.
        """
        use_active_tenant: NotRequired[pulumi.Input[bool]]
        """
        Whether users with existing accounts that match SSO configurations for multiple tenants should be logged in using the SSO for their active (last logged into) account, or whether the unspecified tenant strategy should apply.
        """
elif False:
    WorkspaceSsoMultiTenantPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceSsoMultiTenantPolicyArgs:
    def __init__(__self__, *,
                 unspecified_tenant_strategy: Optional[pulumi.Input[str]] = None,
                 use_active_tenant: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] unspecified_tenant_strategy: Strategy for logging in nonexisting users that match SSO configurations for multiple tenants when no tenant has been specified. Either BLOCK or FIRST_CREATED.
        :param pulumi.Input[bool] use_active_tenant: Whether users with existing accounts that match SSO configurations for multiple tenants should be logged in using the SSO for their active (last logged into) account, or whether the unspecified tenant strategy should apply.
        """
        if unspecified_tenant_strategy is not None:
            pulumi.set(__self__, "unspecified_tenant_strategy", unspecified_tenant_strategy)
        if use_active_tenant is not None:
            pulumi.set(__self__, "use_active_tenant", use_active_tenant)

    @property
    @pulumi.getter(name="unspecifiedTenantStrategy")
    def unspecified_tenant_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Strategy for logging in nonexisting users that match SSO configurations for multiple tenants when no tenant has been specified. Either BLOCK or FIRST_CREATED.
        """
        return pulumi.get(self, "unspecified_tenant_strategy")

    @unspecified_tenant_strategy.setter
    def unspecified_tenant_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unspecified_tenant_strategy", value)

    @property
    @pulumi.getter(name="useActiveTenant")
    def use_active_tenant(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether users with existing accounts that match SSO configurations for multiple tenants should be logged in using the SSO for their active (last logged into) account, or whether the unspecified tenant strategy should apply.
        """
        return pulumi.get(self, "use_active_tenant")

    @use_active_tenant.setter
    def use_active_tenant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_active_tenant", value)


if not MYPY:
    class WorkspaceSuspiciousIpEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceSuspiciousIpEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceSuspiciousIpEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceUserActivationEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceUserActivationEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceUserActivationEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceUserInvitationEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceUserInvitationEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceUserInvitationEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


if not MYPY:
    class WorkspaceUserUsedInvitationEmailArgsDict(TypedDict):
        from_address: pulumi.Input[str]
        """
        The address to use in the "From" header of the email.
        """
        from_name: pulumi.Input[str]
        """
        The name to use in the "From" header of the email.
        """
        html_template: pulumi.Input[str]
        """
        The HTML template to use in the email.
        """
        subject: pulumi.Input[str]
        """
        The subject of the email.
        """
        redirect_url: NotRequired[pulumi.Input[str]]
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        success_redirect_url: NotRequired[pulumi.Input[str]]
        """
        The success redirect URL to use, if applicable.
        """
elif False:
    WorkspaceUserUsedInvitationEmailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceUserUsedInvitationEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] from_address: The address to use in the "From" header of the email.
        :param pulumi.Input[str] from_name: The name to use in the "From" header of the email.
        :param pulumi.Input[str] html_template: The HTML template to use in the email.
        :param pulumi.Input[str] subject: The subject of the email.
        :param pulumi.Input[str] redirect_url: The redirect URL to use, if applicable.
               
                   Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        :param pulumi.Input[str] success_redirect_url: The success redirect URL to use, if applicable.
        """
        pulumi.set(__self__, "from_address", from_address)
        pulumi.set(__self__, "from_name", from_name)
        pulumi.set(__self__, "html_template", html_template)
        pulumi.set(__self__, "subject", subject)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if success_redirect_url is not None:
            pulumi.set(__self__, "success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        """
        The address to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        """
        The name to use in the "From" header of the email.
        """
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        """
        The HTML template to use in the email.
        """
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The redirect URL to use, if applicable.

            Access this value as "\\{\\{redirectURL\\}\\}" in the template.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        The success redirect URL to use, if applicable.
        """
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


