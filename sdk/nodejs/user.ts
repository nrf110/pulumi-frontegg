// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configures a Frontegg user.
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'frontegg:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Whether the user gets verified upon creation.
     */
    public readonly automaticallyVerify!: pulumi.Output<boolean | undefined>;
    /**
     * The user's email address.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * The user's login password.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * List of the role IDs that the user has in the tenant
     */
    public readonly roleIds!: pulumi.Output<string[]>;
    /**
     * Skip sending the invite email. If true, user is automatically verified on creation.
     */
    public readonly skipInviteEmail!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the user is a super user.
     */
    public readonly superuser!: pulumi.Output<boolean | undefined>;
    /**
     * The tenant ID for this user.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["automaticallyVerify"] = state ? state.automaticallyVerify : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["roleIds"] = state ? state.roleIds : undefined;
            resourceInputs["skipInviteEmail"] = state ? state.skipInviteEmail : undefined;
            resourceInputs["superuser"] = state ? state.superuser : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.roleIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleIds'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["automaticallyVerify"] = args ? args.automaticallyVerify : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["roleIds"] = args ? args.roleIds : undefined;
            resourceInputs["skipInviteEmail"] = args ? args.skipInviteEmail : undefined;
            resourceInputs["superuser"] = args ? args.superuser : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Whether the user gets verified upon creation.
     */
    automaticallyVerify?: pulumi.Input<boolean>;
    /**
     * The user's email address.
     */
    email?: pulumi.Input<string>;
    /**
     * The user's login password.
     */
    password?: pulumi.Input<string>;
    /**
     * List of the role IDs that the user has in the tenant
     */
    roleIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Skip sending the invite email. If true, user is automatically verified on creation.
     */
    skipInviteEmail?: pulumi.Input<boolean>;
    /**
     * Whether the user is a super user.
     */
    superuser?: pulumi.Input<boolean>;
    /**
     * The tenant ID for this user.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Whether the user gets verified upon creation.
     */
    automaticallyVerify?: pulumi.Input<boolean>;
    /**
     * The user's email address.
     */
    email: pulumi.Input<string>;
    /**
     * The user's login password.
     */
    password?: pulumi.Input<string>;
    /**
     * List of the role IDs that the user has in the tenant
     */
    roleIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Skip sending the invite email. If true, user is automatically verified on creation.
     */
    skipInviteEmail?: pulumi.Input<boolean>;
    /**
     * Whether the user is a super user.
     */
    superuser?: pulumi.Input<boolean>;
    /**
     * The tenant ID for this user.
     */
    tenantId: pulumi.Input<string>;
}
