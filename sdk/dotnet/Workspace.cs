// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Frontegg
{
    /// <summary>
    /// Workspace configuration.
    /// 
    /// This is a singleton resource. You must only create one frontegg.Workspace resource
    /// per Frontegg provider.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Frontegg = Pulumi.Frontegg;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Frontegg.Workspace("example", new()
    ///     {
    ///         Name = "Your Company",
    ///         Country = "US",
    ///         BackendStack = "Python",
    ///         FrontendStack = "React",
    ///         OpenSaasInstalled = false,
    ///         FronteggDomain = "blah.frontegg.com",
    ///         AllowedOrigins = new[]
    ///         {
    ///             "https://yourcompany.com",
    ///         },
    ///         AuthPolicy = new Frontegg.Inputs.WorkspaceAuthPolicyArgs
    ///         {
    ///             AllowUnverifiedUsers = true,
    ///             AllowSignups = true,
    ///             EnableApiTokens = true,
    ///             EnableRoles = true,
    ///             JwtAlgorithm = "RS256",
    ///             MachineToMachineAuthStrategy = "ClientCredentials",
    ///             JwtAccessTokenExpiration = 86400,
    ///             JwtRefreshTokenExpiration = 2592000,
    ///             SameSiteCookiePolicy = "strict",
    ///             AuthStrategy = "EmailAndPassword",
    ///             AllowTenantInvitations = true,
    ///         },
    ///         MfaPolicy = new Frontegg.Inputs.WorkspaceMfaPolicyArgs
    ///         {
    ///             AllowRememberDevice = true,
    ///             DeviceExpiration = 604800,
    ///             Enforce = "unless-saml",
    ///         },
    ///         MfaAuthenticationApp = new Frontegg.Inputs.WorkspaceMfaAuthenticationAppArgs
    ///         {
    ///             ServiceName = "Your Company",
    ///         },
    ///         LockoutPolicy = new Frontegg.Inputs.WorkspaceLockoutPolicyArgs
    ///         {
    ///             MaxAttempts = 10,
    ///         },
    ///         PasswordPolicy = new Frontegg.Inputs.WorkspacePasswordPolicyArgs
    ///         {
    ///             AllowPassphrases = false,
    ///             MinLength = 10,
    ///             MaxLength = 128,
    ///             MinTests = 2,
    ///             MinPhraseLength = 6,
    ///             History = 2,
    ///         },
    ///         CaptchaPolicy = new Frontegg.Inputs.WorkspaceCaptchaPolicyArgs
    ///         {
    ///             SiteKey = "fake-site-key",
    ///             SecretKey = "fake-secret-key",
    ///             MinScore = 0.5,
    ///         },
    ///         HostedLogin = new Frontegg.Inputs.WorkspaceHostedLoginArgs
    ///         {
    ///             AllowedRedirectUrls = new[]
    ///             {
    ///                 "http://example.com/a",
    ///                 "http://example.com/b",
    ///             },
    ///         },
    ///         FacebookSocialLogin = new Frontegg.Inputs.WorkspaceFacebookSocialLoginArgs
    ///         {
    ///             ClientId = "fake-client-id",
    ///             RedirectUrl = "fake-redirect-url",
    ///             Secret = "fake-secret",
    ///             Customised = false,
    ///         },
    ///         GithubSocialLogin = new Frontegg.Inputs.WorkspaceGithubSocialLoginArgs
    ///         {
    ///             ClientId = "fake-client-id",
    ///             RedirectUrl = "fake-redirect-url",
    ///             Secret = "fake-secret",
    ///             Customised = false,
    ///         },
    ///         GoogleSocialLogin = new Frontegg.Inputs.WorkspaceGoogleSocialLoginArgs
    ///         {
    ///             ClientId = "fake-client-id",
    ///             RedirectUrl = "fake-redirect-url",
    ///             Secret = "fake-secret",
    ///             Customised = false,
    ///         },
    ///         MicrosoftSocialLogin = new Frontegg.Inputs.WorkspaceMicrosoftSocialLoginArgs
    ///         {
    ///             ClientId = "fake-client-id",
    ///             RedirectUrl = "fake-redirect-url",
    ///             Secret = "fake-secret",
    ///             Customised = false,
    ///         },
    ///         Saml = new Frontegg.Inputs.WorkspaceSamlArgs
    ///         {
    ///             AcsUrl = "https://mycompany.com/saml",
    ///             SpEntityId = "my-company",
    ///             RedirectUrl = "http://localhost:3000",
    ///         },
    ///         Oidc = new Frontegg.Inputs.WorkspaceOidcArgs
    ///         {
    ///             RedirectUrl = "http://localhost:3000",
    ///         },
    ///         ResetPasswordEmail = new Frontegg.Inputs.WorkspaceResetPasswordEmailArgs
    ///         {
    ///             FromAddress = "me@company.com",
    ///             FromName = "Your Company",
    ///             Subject = "Reset Your Company Password",
    ///             HtmlTemplate = "&lt;strong&gt;Reset your password! {{redirectURL}}&lt;/strong&gt;",
    ///             RedirectUrl = "https://yourcompany.com/reset",
    ///         },
    ///         AdminPortal = new Frontegg.Inputs.WorkspaceAdminPortalArgs
    ///         {
    ///             EnableAccountSettings = false,
    ///             EnableApiTokens = false,
    ///             EnableAuditLogs = false,
    ///             EnablePersonalApiTokens = false,
    ///             EnablePrivacy = false,
    ///             EnableProfile = false,
    ///             EnableRoles = false,
    ///             EnableSecurity = false,
    ///             EnableSso = false,
    ///             EnableSubscriptions = false,
    ///             EnableUsage = false,
    ///             EnableUsers = false,
    ///             EnableWebhooks = false,
    ///             EnableGroups = false,
    ///             EnableProvisioning = false,
    ///             Palette = new Frontegg.Inputs.WorkspaceAdminPortalPaletteArgs
    ///             {
    ///                 Errors = new[]
    ///                 {
    ///                     new Frontegg.Inputs.WorkspaceAdminPortalPaletteErrorArgs
    ///                     {
    ///                         ContrastText = "#eeeef0",
    ///                         Dark = "#ae402c",
    ///                         Light = "#FFEEEA",
    ///                         Main = "#E1583E",
    ///                     },
    ///                 },
    ///                 Infos = new[]
    ///                 {
    ///                     new Frontegg.Inputs.WorkspaceAdminPortalPaletteInfoArgs
    ///                     {
    ///                         ContrastText = "#eeeef0",
    ///                         Dark = "#3c6492",
    ///                         Light = "#E2EEF9",
    ///                         Main = "#5587C0",
    ///                     },
    ///                 },
    ///                 Primaries = new[]
    ///                 {
    ///                     new Frontegg.Inputs.WorkspaceAdminPortalPalettePrimaryArgs
    ///                     {
    ///                         Active = "#278854",
    ///                         ContrastText = "#eeeef0",
    ///                         Dark = "#36A76A",
    ///                         Hover = "#32A265",
    ///                         Light = "#A2E1BF",
    ///                         Main = "#43BB7A",
    ///                     },
    ///                 },
    ///                 Secondaries = new[]
    ///                 {
    ///                     new Frontegg.Inputs.WorkspaceAdminPortalPaletteSecondaryArgs
    ///                     {
    ///                         Active = "#E6ECF4",
    ///                         ContrastText = "#eeeef0",
    ///                         Dark = "#E6ECF4",
    ///                         Hover = "#F0F3F8",
    ///                         Light = "#FBFBFC",
    ///                         Main = "#FBFBFC",
    ///                     },
    ///                 },
    ///                 Successes = new[]
    ///                 {
    ///                     new Frontegg.Inputs.WorkspaceAdminPortalPaletteSuccessArgs
    ///                     {
    ///                         ContrastText = "#eeeef0",
    ///                         Dark = "#1d7c30",
    ///                         Light = "#E1F5E2",
    ///                         Main = "#2CA744",
    ///                     },
    ///                 },
    ///                 Warnings = new[]
    ///                 {
    ///                     new Frontegg.Inputs.WorkspaceAdminPortalPaletteWarningArgs
    ///                     {
    ///                         ContrastText = "#eeeef0",
    ///                         Dark = "#EAE1C2",
    ///                         Light = "#F9F4E2",
    ///                         Main = "#A79D7B",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [FronteggResourceType("frontegg:index/workspace:Workspace")]
    public partial class Workspace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configures the admin portal.
        /// </summary>
        [Output("adminPortal")]
        public Output<Outputs.WorkspaceAdminPortal> AdminPortal { get; private set; } = null!;

        /// <summary>
        /// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
        /// responses.
        /// </summary>
        [Output("allowedOrigins")]
        public Output<ImmutableArray<string>> AllowedOrigins { get; private set; } = null!;

        /// <summary>
        /// Configures the general authentication policy.
        /// </summary>
        [Output("authPolicy")]
        public Output<Outputs.WorkspaceAuthPolicy> AuthPolicy { get; private set; } = null!;

        /// <summary>
        /// The backend stack of the application associated with the workspace.
        /// </summary>
        [Output("backendStack")]
        public Output<string> BackendStack { get; private set; } = null!;

        /// <summary>
        /// Configures the bot detection email.
        /// </summary>
        [Output("botDetectionEmail")]
        public Output<Outputs.WorkspaceBotDetectionEmail?> BotDetectionEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the brute force protection email.
        /// </summary>
        [Output("bruteForceProtectionEmail")]
        public Output<Outputs.WorkspaceBruteForceProtectionEmail?> BruteForceProtectionEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the bulk tenants invite email.
        /// </summary>
        [Output("bulkTenantsInvitesEmail")]
        public Output<Outputs.WorkspaceBulkTenantsInvitesEmail?> BulkTenantsInvitesEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the CAPTCHA policy in the signup form.
        /// </summary>
        [Output("captchaPolicy")]
        public Output<Outputs.WorkspaceCaptchaPolicy?> CaptchaPolicy { get; private set; } = null!;

        /// <summary>
        /// The country associated with the workspace.
        /// </summary>
        [Output("country")]
        public Output<string> Country { get; private set; } = null!;

        /// <summary>
        /// List of custom domains at which Frontegg services will be reachable. You must configure CNAME for each domain, you can
        /// get record values from the portal.
        /// </summary>
        [Output("customDomains")]
        public Output<ImmutableArray<string>> CustomDomains { get; private set; } = null!;

        /// <summary>
        /// Configures the verification email.
        /// </summary>
        [Output("emailVerificationEmail")]
        public Output<Outputs.WorkspaceEmailVerificationEmail?> EmailVerificationEmail { get; private set; } = null!;

        /// <summary>
        /// Configures social login with Facebook.
        /// </summary>
        [Output("facebookSocialLogin")]
        public Output<Outputs.WorkspaceFacebookSocialLogin?> FacebookSocialLogin { get; private set; } = null!;

        /// <summary>
        /// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
        /// ".us.frontegg.com".
        /// </summary>
        [Output("fronteggDomain")]
        public Output<string> FronteggDomain { get; private set; } = null!;

        /// <summary>
        /// The frontend stack of the application associated with the worksapce.
        /// </summary>
        [Output("frontendStack")]
        public Output<string> FrontendStack { get; private set; } = null!;

        /// <summary>
        /// Configures social login with GitHub.
        /// </summary>
        [Output("githubSocialLogin")]
        public Output<Outputs.WorkspaceGithubSocialLogin?> GithubSocialLogin { get; private set; } = null!;

        /// <summary>
        /// Configures social login with Google.
        /// </summary>
        [Output("googleSocialLogin")]
        public Output<Outputs.WorkspaceGoogleSocialLogin?> GoogleSocialLogin { get; private set; } = null!;

        /// <summary>
        /// Configures Frontegg-hosted OAuth login.
        /// </summary>
        [Output("hostedLogin")]
        public Output<Outputs.WorkspaceHostedLogin?> HostedLogin { get; private set; } = null!;

        /// <summary>
        /// Configures the impossible travel email.
        /// </summary>
        [Output("impossibleTravelEmail")]
        public Output<Outputs.WorkspaceImpossibleTravelEmail?> ImpossibleTravelEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the user lockout policy.
        /// </summary>
        [Output("lockoutPolicy")]
        public Output<Outputs.WorkspaceLockoutPolicy?> LockoutPolicy { get; private set; } = null!;

        /// <summary>
        /// Configures the one time code email.
        /// </summary>
        [Output("magicCodeEmail")]
        public Output<Outputs.WorkspaceMagicCodeEmail?> MagicCodeEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the magic link email.
        /// </summary>
        [Output("magicLinkEmail")]
        public Output<Outputs.WorkspaceMagicLinkEmail?> MagicLinkEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the multi-factor authentication (MFA) via an authentication app.
        /// </summary>
        [Output("mfaAuthenticationApp")]
        public Output<Outputs.WorkspaceMfaAuthenticationApp?> MfaAuthenticationApp { get; private set; } = null!;

        /// <summary>
        /// Configures the MFA enroll email.
        /// </summary>
        [Output("mfaEnrollEmail")]
        public Output<Outputs.WorkspaceMfaEnrollEmail?> MfaEnrollEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the account challenge with code email.
        /// </summary>
        [Output("mfaOtcEmail")]
        public Output<Outputs.WorkspaceMfaOtcEmail?> MfaOtcEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the multi-factor authentication (MFA) policy.
        /// </summary>
        [Output("mfaPolicy")]
        public Output<Outputs.WorkspaceMfaPolicy> MfaPolicy { get; private set; } = null!;

        /// <summary>
        /// Configures the MFA recovery code email.
        /// </summary>
        [Output("mfaRecoveryCodeEmail")]
        public Output<Outputs.WorkspaceMfaRecoveryCodeEmail?> MfaRecoveryCodeEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the MFA unenroll email.
        /// </summary>
        [Output("mfaUnenrollEmail")]
        public Output<Outputs.WorkspaceMfaUnenrollEmail?> MfaUnenrollEmail { get; private set; } = null!;

        /// <summary>
        /// Configures social login with Google.
        /// </summary>
        [Output("microsoftSocialLogin")]
        public Output<Outputs.WorkspaceMicrosoftSocialLogin?> MicrosoftSocialLogin { get; private set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configures the new device connected email.
        /// </summary>
        [Output("newDeviceConnectedEmail")]
        public Output<Outputs.WorkspaceNewDeviceConnectedEmail?> NewDeviceConnectedEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the new MFA method email.
        /// </summary>
        [Output("newMfaMethodEmail")]
        public Output<Outputs.WorkspaceNewMfaMethodEmail?> NewMfaMethodEmail { get; private set; } = null!;

        /// <summary>
        /// Configures SSO via OIDC.
        /// </summary>
        [Output("oidc")]
        public Output<Outputs.WorkspaceOidc?> Oidc { get; private set; } = null!;

        /// <summary>
        /// Whether the application associated with the workspace has OpenSaaS installed.
        /// </summary>
        [Output("openSaasInstalled")]
        public Output<bool> OpenSaasInstalled { get; private set; } = null!;

        /// <summary>
        /// Configures the password policy.
        /// </summary>
        [Output("passwordPolicy")]
        public Output<Outputs.WorkspacePasswordPolicy> PasswordPolicy { get; private set; } = null!;

        /// <summary>
        /// Configures the pwned password email.
        /// </summary>
        [Output("pwnedPasswordEmail")]
        public Output<Outputs.WorkspacePwnedPasswordEmail?> PwnedPasswordEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the remove MFA method email.
        /// </summary>
        [Output("removeMfaMethodEmail")]
        public Output<Outputs.WorkspaceRemoveMfaMethodEmail?> RemoveMfaMethodEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the password reset email.
        /// </summary>
        [Output("resetPasswordEmail")]
        public Output<Outputs.WorkspaceResetPasswordEmail?> ResetPasswordEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the reset phone number email.
        /// </summary>
        [Output("resetPhoneNumberEmail")]
        public Output<Outputs.WorkspaceResetPhoneNumberEmail?> ResetPhoneNumberEmail { get; private set; } = null!;

        /// <summary>
        /// Configures SSO via SAML.
        /// </summary>
        [Output("saml")]
        public Output<Outputs.WorkspaceSaml?> Saml { get; private set; } = null!;

        /// <summary>
        /// Configures the SMS authentication enabled email.
        /// </summary>
        [Output("smsAuthenticationEnabledEmail")]
        public Output<Outputs.WorkspaceSmsAuthenticationEnabledEmail?> SmsAuthenticationEnabledEmail { get; private set; } = null!;

        /// <summary>
        /// Configures how SSO domains are validated.
        /// </summary>
        [Output("ssoDomainPolicy")]
        public Output<Outputs.WorkspaceSsoDomainPolicy?> SsoDomainPolicy { get; private set; } = null!;

        /// <summary>
        /// Configures how multiple tenants can claim the same SSO domain.
        /// </summary>
        [Output("ssoMultiTenantPolicy")]
        public Output<Outputs.WorkspaceSsoMultiTenantPolicy?> SsoMultiTenantPolicy { get; private set; } = null!;

        /// <summary>
        /// Configures the suspicious IP email.
        /// </summary>
        [Output("suspiciousIpEmail")]
        public Output<Outputs.WorkspaceSuspiciousIpEmail?> SuspiciousIpEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the user activation email.
        /// </summary>
        [Output("userActivationEmail")]
        public Output<Outputs.WorkspaceUserActivationEmail?> UserActivationEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the user invitation email.
        /// </summary>
        [Output("userInvitationEmail")]
        public Output<Outputs.WorkspaceUserInvitationEmail?> UserInvitationEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the user used invitation email.
        /// </summary>
        [Output("userUsedInvitationEmail")]
        public Output<Outputs.WorkspaceUserUsedInvitationEmail?> UserUsedInvitationEmail { get; private set; } = null!;


        /// <summary>
        /// Create a Workspace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workspace(string name, WorkspaceArgs args, CustomResourceOptions? options = null)
            : base("frontegg:index/workspace:Workspace", name, args ?? new WorkspaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workspace(string name, Input<string> id, WorkspaceState? state = null, CustomResourceOptions? options = null)
            : base("frontegg:index/workspace:Workspace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workspace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workspace Get(string name, Input<string> id, WorkspaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Workspace(name, id, state, options);
        }
    }

    public sealed class WorkspaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configures the admin portal.
        /// </summary>
        [Input("adminPortal", required: true)]
        public Input<Inputs.WorkspaceAdminPortalArgs> AdminPortal { get; set; } = null!;

        [Input("allowedOrigins", required: true)]
        private InputList<string>? _allowedOrigins;

        /// <summary>
        /// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
        /// responses.
        /// </summary>
        public InputList<string> AllowedOrigins
        {
            get => _allowedOrigins ?? (_allowedOrigins = new InputList<string>());
            set => _allowedOrigins = value;
        }

        /// <summary>
        /// Configures the general authentication policy.
        /// </summary>
        [Input("authPolicy", required: true)]
        public Input<Inputs.WorkspaceAuthPolicyArgs> AuthPolicy { get; set; } = null!;

        /// <summary>
        /// The backend stack of the application associated with the workspace.
        /// </summary>
        [Input("backendStack", required: true)]
        public Input<string> BackendStack { get; set; } = null!;

        /// <summary>
        /// Configures the bot detection email.
        /// </summary>
        [Input("botDetectionEmail")]
        public Input<Inputs.WorkspaceBotDetectionEmailArgs>? BotDetectionEmail { get; set; }

        /// <summary>
        /// Configures the brute force protection email.
        /// </summary>
        [Input("bruteForceProtectionEmail")]
        public Input<Inputs.WorkspaceBruteForceProtectionEmailArgs>? BruteForceProtectionEmail { get; set; }

        /// <summary>
        /// Configures the bulk tenants invite email.
        /// </summary>
        [Input("bulkTenantsInvitesEmail")]
        public Input<Inputs.WorkspaceBulkTenantsInvitesEmailArgs>? BulkTenantsInvitesEmail { get; set; }

        /// <summary>
        /// Configures the CAPTCHA policy in the signup form.
        /// </summary>
        [Input("captchaPolicy")]
        public Input<Inputs.WorkspaceCaptchaPolicyArgs>? CaptchaPolicy { get; set; }

        /// <summary>
        /// The country associated with the workspace.
        /// </summary>
        [Input("country", required: true)]
        public Input<string> Country { get; set; } = null!;

        [Input("customDomains")]
        private InputList<string>? _customDomains;

        /// <summary>
        /// List of custom domains at which Frontegg services will be reachable. You must configure CNAME for each domain, you can
        /// get record values from the portal.
        /// </summary>
        public InputList<string> CustomDomains
        {
            get => _customDomains ?? (_customDomains = new InputList<string>());
            set => _customDomains = value;
        }

        /// <summary>
        /// Configures the verification email.
        /// </summary>
        [Input("emailVerificationEmail")]
        public Input<Inputs.WorkspaceEmailVerificationEmailArgs>? EmailVerificationEmail { get; set; }

        /// <summary>
        /// Configures social login with Facebook.
        /// </summary>
        [Input("facebookSocialLogin")]
        public Input<Inputs.WorkspaceFacebookSocialLoginArgs>? FacebookSocialLogin { get; set; }

        /// <summary>
        /// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
        /// ".us.frontegg.com".
        /// </summary>
        [Input("fronteggDomain", required: true)]
        public Input<string> FronteggDomain { get; set; } = null!;

        /// <summary>
        /// The frontend stack of the application associated with the worksapce.
        /// </summary>
        [Input("frontendStack", required: true)]
        public Input<string> FrontendStack { get; set; } = null!;

        /// <summary>
        /// Configures social login with GitHub.
        /// </summary>
        [Input("githubSocialLogin")]
        public Input<Inputs.WorkspaceGithubSocialLoginArgs>? GithubSocialLogin { get; set; }

        /// <summary>
        /// Configures social login with Google.
        /// </summary>
        [Input("googleSocialLogin")]
        public Input<Inputs.WorkspaceGoogleSocialLoginArgs>? GoogleSocialLogin { get; set; }

        /// <summary>
        /// Configures Frontegg-hosted OAuth login.
        /// </summary>
        [Input("hostedLogin")]
        public Input<Inputs.WorkspaceHostedLoginArgs>? HostedLogin { get; set; }

        /// <summary>
        /// Configures the impossible travel email.
        /// </summary>
        [Input("impossibleTravelEmail")]
        public Input<Inputs.WorkspaceImpossibleTravelEmailArgs>? ImpossibleTravelEmail { get; set; }

        /// <summary>
        /// Configures the user lockout policy.
        /// </summary>
        [Input("lockoutPolicy")]
        public Input<Inputs.WorkspaceLockoutPolicyArgs>? LockoutPolicy { get; set; }

        /// <summary>
        /// Configures the one time code email.
        /// </summary>
        [Input("magicCodeEmail")]
        public Input<Inputs.WorkspaceMagicCodeEmailArgs>? MagicCodeEmail { get; set; }

        /// <summary>
        /// Configures the magic link email.
        /// </summary>
        [Input("magicLinkEmail")]
        public Input<Inputs.WorkspaceMagicLinkEmailArgs>? MagicLinkEmail { get; set; }

        /// <summary>
        /// Configures the multi-factor authentication (MFA) via an authentication app.
        /// </summary>
        [Input("mfaAuthenticationApp")]
        public Input<Inputs.WorkspaceMfaAuthenticationAppArgs>? MfaAuthenticationApp { get; set; }

        /// <summary>
        /// Configures the MFA enroll email.
        /// </summary>
        [Input("mfaEnrollEmail")]
        public Input<Inputs.WorkspaceMfaEnrollEmailArgs>? MfaEnrollEmail { get; set; }

        /// <summary>
        /// Configures the account challenge with code email.
        /// </summary>
        [Input("mfaOtcEmail")]
        public Input<Inputs.WorkspaceMfaOtcEmailArgs>? MfaOtcEmail { get; set; }

        /// <summary>
        /// Configures the multi-factor authentication (MFA) policy.
        /// </summary>
        [Input("mfaPolicy", required: true)]
        public Input<Inputs.WorkspaceMfaPolicyArgs> MfaPolicy { get; set; } = null!;

        /// <summary>
        /// Configures the MFA recovery code email.
        /// </summary>
        [Input("mfaRecoveryCodeEmail")]
        public Input<Inputs.WorkspaceMfaRecoveryCodeEmailArgs>? MfaRecoveryCodeEmail { get; set; }

        /// <summary>
        /// Configures the MFA unenroll email.
        /// </summary>
        [Input("mfaUnenrollEmail")]
        public Input<Inputs.WorkspaceMfaUnenrollEmailArgs>? MfaUnenrollEmail { get; set; }

        /// <summary>
        /// Configures social login with Google.
        /// </summary>
        [Input("microsoftSocialLogin")]
        public Input<Inputs.WorkspaceMicrosoftSocialLoginArgs>? MicrosoftSocialLogin { get; set; }

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configures the new device connected email.
        /// </summary>
        [Input("newDeviceConnectedEmail")]
        public Input<Inputs.WorkspaceNewDeviceConnectedEmailArgs>? NewDeviceConnectedEmail { get; set; }

        /// <summary>
        /// Configures the new MFA method email.
        /// </summary>
        [Input("newMfaMethodEmail")]
        public Input<Inputs.WorkspaceNewMfaMethodEmailArgs>? NewMfaMethodEmail { get; set; }

        /// <summary>
        /// Configures SSO via OIDC.
        /// </summary>
        [Input("oidc")]
        public Input<Inputs.WorkspaceOidcArgs>? Oidc { get; set; }

        /// <summary>
        /// Whether the application associated with the workspace has OpenSaaS installed.
        /// </summary>
        [Input("openSaasInstalled", required: true)]
        public Input<bool> OpenSaasInstalled { get; set; } = null!;

        /// <summary>
        /// Configures the password policy.
        /// </summary>
        [Input("passwordPolicy", required: true)]
        public Input<Inputs.WorkspacePasswordPolicyArgs> PasswordPolicy { get; set; } = null!;

        /// <summary>
        /// Configures the pwned password email.
        /// </summary>
        [Input("pwnedPasswordEmail")]
        public Input<Inputs.WorkspacePwnedPasswordEmailArgs>? PwnedPasswordEmail { get; set; }

        /// <summary>
        /// Configures the remove MFA method email.
        /// </summary>
        [Input("removeMfaMethodEmail")]
        public Input<Inputs.WorkspaceRemoveMfaMethodEmailArgs>? RemoveMfaMethodEmail { get; set; }

        /// <summary>
        /// Configures the password reset email.
        /// </summary>
        [Input("resetPasswordEmail")]
        public Input<Inputs.WorkspaceResetPasswordEmailArgs>? ResetPasswordEmail { get; set; }

        /// <summary>
        /// Configures the reset phone number email.
        /// </summary>
        [Input("resetPhoneNumberEmail")]
        public Input<Inputs.WorkspaceResetPhoneNumberEmailArgs>? ResetPhoneNumberEmail { get; set; }

        /// <summary>
        /// Configures SSO via SAML.
        /// </summary>
        [Input("saml")]
        public Input<Inputs.WorkspaceSamlArgs>? Saml { get; set; }

        /// <summary>
        /// Configures the SMS authentication enabled email.
        /// </summary>
        [Input("smsAuthenticationEnabledEmail")]
        public Input<Inputs.WorkspaceSmsAuthenticationEnabledEmailArgs>? SmsAuthenticationEnabledEmail { get; set; }

        /// <summary>
        /// Configures how SSO domains are validated.
        /// </summary>
        [Input("ssoDomainPolicy")]
        public Input<Inputs.WorkspaceSsoDomainPolicyArgs>? SsoDomainPolicy { get; set; }

        /// <summary>
        /// Configures how multiple tenants can claim the same SSO domain.
        /// </summary>
        [Input("ssoMultiTenantPolicy")]
        public Input<Inputs.WorkspaceSsoMultiTenantPolicyArgs>? SsoMultiTenantPolicy { get; set; }

        /// <summary>
        /// Configures the suspicious IP email.
        /// </summary>
        [Input("suspiciousIpEmail")]
        public Input<Inputs.WorkspaceSuspiciousIpEmailArgs>? SuspiciousIpEmail { get; set; }

        /// <summary>
        /// Configures the user activation email.
        /// </summary>
        [Input("userActivationEmail")]
        public Input<Inputs.WorkspaceUserActivationEmailArgs>? UserActivationEmail { get; set; }

        /// <summary>
        /// Configures the user invitation email.
        /// </summary>
        [Input("userInvitationEmail")]
        public Input<Inputs.WorkspaceUserInvitationEmailArgs>? UserInvitationEmail { get; set; }

        /// <summary>
        /// Configures the user used invitation email.
        /// </summary>
        [Input("userUsedInvitationEmail")]
        public Input<Inputs.WorkspaceUserUsedInvitationEmailArgs>? UserUsedInvitationEmail { get; set; }

        public WorkspaceArgs()
        {
        }
        public static new WorkspaceArgs Empty => new WorkspaceArgs();
    }

    public sealed class WorkspaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configures the admin portal.
        /// </summary>
        [Input("adminPortal")]
        public Input<Inputs.WorkspaceAdminPortalGetArgs>? AdminPortal { get; set; }

        [Input("allowedOrigins")]
        private InputList<string>? _allowedOrigins;

        /// <summary>
        /// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
        /// responses.
        /// </summary>
        public InputList<string> AllowedOrigins
        {
            get => _allowedOrigins ?? (_allowedOrigins = new InputList<string>());
            set => _allowedOrigins = value;
        }

        /// <summary>
        /// Configures the general authentication policy.
        /// </summary>
        [Input("authPolicy")]
        public Input<Inputs.WorkspaceAuthPolicyGetArgs>? AuthPolicy { get; set; }

        /// <summary>
        /// The backend stack of the application associated with the workspace.
        /// </summary>
        [Input("backendStack")]
        public Input<string>? BackendStack { get; set; }

        /// <summary>
        /// Configures the bot detection email.
        /// </summary>
        [Input("botDetectionEmail")]
        public Input<Inputs.WorkspaceBotDetectionEmailGetArgs>? BotDetectionEmail { get; set; }

        /// <summary>
        /// Configures the brute force protection email.
        /// </summary>
        [Input("bruteForceProtectionEmail")]
        public Input<Inputs.WorkspaceBruteForceProtectionEmailGetArgs>? BruteForceProtectionEmail { get; set; }

        /// <summary>
        /// Configures the bulk tenants invite email.
        /// </summary>
        [Input("bulkTenantsInvitesEmail")]
        public Input<Inputs.WorkspaceBulkTenantsInvitesEmailGetArgs>? BulkTenantsInvitesEmail { get; set; }

        /// <summary>
        /// Configures the CAPTCHA policy in the signup form.
        /// </summary>
        [Input("captchaPolicy")]
        public Input<Inputs.WorkspaceCaptchaPolicyGetArgs>? CaptchaPolicy { get; set; }

        /// <summary>
        /// The country associated with the workspace.
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        [Input("customDomains")]
        private InputList<string>? _customDomains;

        /// <summary>
        /// List of custom domains at which Frontegg services will be reachable. You must configure CNAME for each domain, you can
        /// get record values from the portal.
        /// </summary>
        public InputList<string> CustomDomains
        {
            get => _customDomains ?? (_customDomains = new InputList<string>());
            set => _customDomains = value;
        }

        /// <summary>
        /// Configures the verification email.
        /// </summary>
        [Input("emailVerificationEmail")]
        public Input<Inputs.WorkspaceEmailVerificationEmailGetArgs>? EmailVerificationEmail { get; set; }

        /// <summary>
        /// Configures social login with Facebook.
        /// </summary>
        [Input("facebookSocialLogin")]
        public Input<Inputs.WorkspaceFacebookSocialLoginGetArgs>? FacebookSocialLogin { get; set; }

        /// <summary>
        /// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
        /// ".us.frontegg.com".
        /// </summary>
        [Input("fronteggDomain")]
        public Input<string>? FronteggDomain { get; set; }

        /// <summary>
        /// The frontend stack of the application associated with the worksapce.
        /// </summary>
        [Input("frontendStack")]
        public Input<string>? FrontendStack { get; set; }

        /// <summary>
        /// Configures social login with GitHub.
        /// </summary>
        [Input("githubSocialLogin")]
        public Input<Inputs.WorkspaceGithubSocialLoginGetArgs>? GithubSocialLogin { get; set; }

        /// <summary>
        /// Configures social login with Google.
        /// </summary>
        [Input("googleSocialLogin")]
        public Input<Inputs.WorkspaceGoogleSocialLoginGetArgs>? GoogleSocialLogin { get; set; }

        /// <summary>
        /// Configures Frontegg-hosted OAuth login.
        /// </summary>
        [Input("hostedLogin")]
        public Input<Inputs.WorkspaceHostedLoginGetArgs>? HostedLogin { get; set; }

        /// <summary>
        /// Configures the impossible travel email.
        /// </summary>
        [Input("impossibleTravelEmail")]
        public Input<Inputs.WorkspaceImpossibleTravelEmailGetArgs>? ImpossibleTravelEmail { get; set; }

        /// <summary>
        /// Configures the user lockout policy.
        /// </summary>
        [Input("lockoutPolicy")]
        public Input<Inputs.WorkspaceLockoutPolicyGetArgs>? LockoutPolicy { get; set; }

        /// <summary>
        /// Configures the one time code email.
        /// </summary>
        [Input("magicCodeEmail")]
        public Input<Inputs.WorkspaceMagicCodeEmailGetArgs>? MagicCodeEmail { get; set; }

        /// <summary>
        /// Configures the magic link email.
        /// </summary>
        [Input("magicLinkEmail")]
        public Input<Inputs.WorkspaceMagicLinkEmailGetArgs>? MagicLinkEmail { get; set; }

        /// <summary>
        /// Configures the multi-factor authentication (MFA) via an authentication app.
        /// </summary>
        [Input("mfaAuthenticationApp")]
        public Input<Inputs.WorkspaceMfaAuthenticationAppGetArgs>? MfaAuthenticationApp { get; set; }

        /// <summary>
        /// Configures the MFA enroll email.
        /// </summary>
        [Input("mfaEnrollEmail")]
        public Input<Inputs.WorkspaceMfaEnrollEmailGetArgs>? MfaEnrollEmail { get; set; }

        /// <summary>
        /// Configures the account challenge with code email.
        /// </summary>
        [Input("mfaOtcEmail")]
        public Input<Inputs.WorkspaceMfaOtcEmailGetArgs>? MfaOtcEmail { get; set; }

        /// <summary>
        /// Configures the multi-factor authentication (MFA) policy.
        /// </summary>
        [Input("mfaPolicy")]
        public Input<Inputs.WorkspaceMfaPolicyGetArgs>? MfaPolicy { get; set; }

        /// <summary>
        /// Configures the MFA recovery code email.
        /// </summary>
        [Input("mfaRecoveryCodeEmail")]
        public Input<Inputs.WorkspaceMfaRecoveryCodeEmailGetArgs>? MfaRecoveryCodeEmail { get; set; }

        /// <summary>
        /// Configures the MFA unenroll email.
        /// </summary>
        [Input("mfaUnenrollEmail")]
        public Input<Inputs.WorkspaceMfaUnenrollEmailGetArgs>? MfaUnenrollEmail { get; set; }

        /// <summary>
        /// Configures social login with Google.
        /// </summary>
        [Input("microsoftSocialLogin")]
        public Input<Inputs.WorkspaceMicrosoftSocialLoginGetArgs>? MicrosoftSocialLogin { get; set; }

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configures the new device connected email.
        /// </summary>
        [Input("newDeviceConnectedEmail")]
        public Input<Inputs.WorkspaceNewDeviceConnectedEmailGetArgs>? NewDeviceConnectedEmail { get; set; }

        /// <summary>
        /// Configures the new MFA method email.
        /// </summary>
        [Input("newMfaMethodEmail")]
        public Input<Inputs.WorkspaceNewMfaMethodEmailGetArgs>? NewMfaMethodEmail { get; set; }

        /// <summary>
        /// Configures SSO via OIDC.
        /// </summary>
        [Input("oidc")]
        public Input<Inputs.WorkspaceOidcGetArgs>? Oidc { get; set; }

        /// <summary>
        /// Whether the application associated with the workspace has OpenSaaS installed.
        /// </summary>
        [Input("openSaasInstalled")]
        public Input<bool>? OpenSaasInstalled { get; set; }

        /// <summary>
        /// Configures the password policy.
        /// </summary>
        [Input("passwordPolicy")]
        public Input<Inputs.WorkspacePasswordPolicyGetArgs>? PasswordPolicy { get; set; }

        /// <summary>
        /// Configures the pwned password email.
        /// </summary>
        [Input("pwnedPasswordEmail")]
        public Input<Inputs.WorkspacePwnedPasswordEmailGetArgs>? PwnedPasswordEmail { get; set; }

        /// <summary>
        /// Configures the remove MFA method email.
        /// </summary>
        [Input("removeMfaMethodEmail")]
        public Input<Inputs.WorkspaceRemoveMfaMethodEmailGetArgs>? RemoveMfaMethodEmail { get; set; }

        /// <summary>
        /// Configures the password reset email.
        /// </summary>
        [Input("resetPasswordEmail")]
        public Input<Inputs.WorkspaceResetPasswordEmailGetArgs>? ResetPasswordEmail { get; set; }

        /// <summary>
        /// Configures the reset phone number email.
        /// </summary>
        [Input("resetPhoneNumberEmail")]
        public Input<Inputs.WorkspaceResetPhoneNumberEmailGetArgs>? ResetPhoneNumberEmail { get; set; }

        /// <summary>
        /// Configures SSO via SAML.
        /// </summary>
        [Input("saml")]
        public Input<Inputs.WorkspaceSamlGetArgs>? Saml { get; set; }

        /// <summary>
        /// Configures the SMS authentication enabled email.
        /// </summary>
        [Input("smsAuthenticationEnabledEmail")]
        public Input<Inputs.WorkspaceSmsAuthenticationEnabledEmailGetArgs>? SmsAuthenticationEnabledEmail { get; set; }

        /// <summary>
        /// Configures how SSO domains are validated.
        /// </summary>
        [Input("ssoDomainPolicy")]
        public Input<Inputs.WorkspaceSsoDomainPolicyGetArgs>? SsoDomainPolicy { get; set; }

        /// <summary>
        /// Configures how multiple tenants can claim the same SSO domain.
        /// </summary>
        [Input("ssoMultiTenantPolicy")]
        public Input<Inputs.WorkspaceSsoMultiTenantPolicyGetArgs>? SsoMultiTenantPolicy { get; set; }

        /// <summary>
        /// Configures the suspicious IP email.
        /// </summary>
        [Input("suspiciousIpEmail")]
        public Input<Inputs.WorkspaceSuspiciousIpEmailGetArgs>? SuspiciousIpEmail { get; set; }

        /// <summary>
        /// Configures the user activation email.
        /// </summary>
        [Input("userActivationEmail")]
        public Input<Inputs.WorkspaceUserActivationEmailGetArgs>? UserActivationEmail { get; set; }

        /// <summary>
        /// Configures the user invitation email.
        /// </summary>
        [Input("userInvitationEmail")]
        public Input<Inputs.WorkspaceUserInvitationEmailGetArgs>? UserInvitationEmail { get; set; }

        /// <summary>
        /// Configures the user used invitation email.
        /// </summary>
        [Input("userUsedInvitationEmail")]
        public Input<Inputs.WorkspaceUserUsedInvitationEmailGetArgs>? UserUsedInvitationEmail { get; set; }

        public WorkspaceState()
        {
        }
        public static new WorkspaceState Empty => new WorkspaceState();
    }
}
