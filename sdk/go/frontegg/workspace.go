// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package frontegg

import (
	"context"
	"reflect"

	"errors"
	"github.com/nrf110/pulumi-frontegg/sdk/go/frontegg/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Workspace configuration.
//
// This is a singleton resource. You must only create one Workspace resource
// per Frontegg provider.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/nrf110/pulumi-frontegg/sdk/go/frontegg"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := frontegg.NewWorkspace(ctx, "example", &frontegg.WorkspaceArgs{
//				Name:              pulumi.String("Your Company"),
//				Country:           pulumi.String("US"),
//				BackendStack:      pulumi.String("Python"),
//				FrontendStack:     pulumi.String("React"),
//				OpenSaasInstalled: pulumi.Bool(false),
//				FronteggDomain:    pulumi.String("blah.frontegg.com"),
//				AllowedOrigins: pulumi.StringArray{
//					pulumi.String("https://yourcompany.com"),
//				},
//				AuthPolicy: &frontegg.WorkspaceAuthPolicyArgs{
//					AllowUnverifiedUsers:         pulumi.Bool(true),
//					AllowSignups:                 pulumi.Bool(true),
//					EnableApiTokens:              pulumi.Bool(true),
//					EnableRoles:                  pulumi.Bool(true),
//					JwtAlgorithm:                 pulumi.String("RS256"),
//					MachineToMachineAuthStrategy: pulumi.String("ClientCredentials"),
//					JwtAccessTokenExpiration:     pulumi.Int(86400),
//					JwtRefreshTokenExpiration:    pulumi.Int(2592000),
//					SameSiteCookiePolicy:         pulumi.String("strict"),
//					AuthStrategy:                 pulumi.String("EmailAndPassword"),
//					AllowTenantInvitations:       pulumi.Bool(true),
//				},
//				MfaPolicy: &frontegg.WorkspaceMfaPolicyArgs{
//					AllowRememberDevice: pulumi.Bool(true),
//					DeviceExpiration:    pulumi.Int(604800),
//					Enforce:             pulumi.String("unless-saml"),
//				},
//				MfaAuthenticationApp: &frontegg.WorkspaceMfaAuthenticationAppArgs{
//					ServiceName: pulumi.String("Your Company"),
//				},
//				LockoutPolicy: &frontegg.WorkspaceLockoutPolicyArgs{
//					MaxAttempts: pulumi.Int(10),
//				},
//				PasswordPolicy: &frontegg.WorkspacePasswordPolicyArgs{
//					AllowPassphrases: pulumi.Bool(false),
//					MinLength:        pulumi.Int(10),
//					MaxLength:        pulumi.Int(128),
//					MinTests:         pulumi.Int(2),
//					MinPhraseLength:  pulumi.Int(6),
//					History:          pulumi.Int(2),
//				},
//				CaptchaPolicy: &frontegg.WorkspaceCaptchaPolicyArgs{
//					SiteKey:   pulumi.String("fake-site-key"),
//					SecretKey: pulumi.String("fake-secret-key"),
//					MinScore:  pulumi.Float64(0.5),
//				},
//				HostedLogin: &frontegg.WorkspaceHostedLoginArgs{
//					AllowedRedirectUrls: pulumi.StringArray{
//						pulumi.String("http://example.com/a"),
//						pulumi.String("http://example.com/b"),
//					},
//				},
//				FacebookSocialLogin: &frontegg.WorkspaceFacebookSocialLoginArgs{
//					ClientId:    pulumi.String("fake-client-id"),
//					RedirectUrl: pulumi.String("fake-redirect-url"),
//					Secret:      pulumi.String("fake-secret"),
//					Customised:  pulumi.Bool(false),
//				},
//				GithubSocialLogin: &frontegg.WorkspaceGithubSocialLoginArgs{
//					ClientId:    pulumi.String("fake-client-id"),
//					RedirectUrl: pulumi.String("fake-redirect-url"),
//					Secret:      pulumi.String("fake-secret"),
//					Customised:  pulumi.Bool(false),
//				},
//				GoogleSocialLogin: &frontegg.WorkspaceGoogleSocialLoginArgs{
//					ClientId:    pulumi.String("fake-client-id"),
//					RedirectUrl: pulumi.String("fake-redirect-url"),
//					Secret:      pulumi.String("fake-secret"),
//					Customised:  pulumi.Bool(false),
//				},
//				MicrosoftSocialLogin: &frontegg.WorkspaceMicrosoftSocialLoginArgs{
//					ClientId:    pulumi.String("fake-client-id"),
//					RedirectUrl: pulumi.String("fake-redirect-url"),
//					Secret:      pulumi.String("fake-secret"),
//					Customised:  pulumi.Bool(false),
//				},
//				Saml: &frontegg.WorkspaceSamlArgs{
//					AcsUrl:      pulumi.String("https://mycompany.com/saml"),
//					SpEntityId:  pulumi.String("my-company"),
//					RedirectUrl: pulumi.String("http://localhost:3000"),
//				},
//				Oidc: &frontegg.WorkspaceOidcArgs{
//					RedirectUrl: pulumi.String("http://localhost:3000"),
//				},
//				ResetPasswordEmail: &frontegg.WorkspaceResetPasswordEmailArgs{
//					FromAddress:  pulumi.String("me@company.com"),
//					FromName:     pulumi.String("Your Company"),
//					Subject:      pulumi.String("Reset Your Company Password"),
//					HtmlTemplate: pulumi.String("<strong>Reset your password! {{redirectURL}}</strong>"),
//					RedirectUrl:  pulumi.String("https://yourcompany.com/reset"),
//				},
//				AdminPortal: &frontegg.WorkspaceAdminPortalArgs{
//					EnableAccountSettings:   pulumi.Bool(false),
//					EnableApiTokens:         pulumi.Bool(false),
//					EnableAuditLogs:         pulumi.Bool(false),
//					EnablePersonalApiTokens: pulumi.Bool(false),
//					EnablePrivacy:           pulumi.Bool(false),
//					EnableProfile:           pulumi.Bool(false),
//					EnableRoles:             pulumi.Bool(false),
//					EnableSecurity:          pulumi.Bool(false),
//					EnableSso:               pulumi.Bool(false),
//					EnableSubscriptions:     pulumi.Bool(false),
//					EnableUsage:             pulumi.Bool(false),
//					EnableUsers:             pulumi.Bool(false),
//					EnableWebhooks:          pulumi.Bool(false),
//					EnableGroups:            pulumi.Bool(false),
//					EnableProvisioning:      pulumi.Bool(false),
//					Palette: &frontegg.WorkspaceAdminPortalPaletteArgs{
//						Errors: frontegg.WorkspaceAdminPortalPaletteErrorArray{
//							&frontegg.WorkspaceAdminPortalPaletteErrorArgs{
//								ContrastText: pulumi.String("#eeeef0"),
//								Dark:         pulumi.String("#ae402c"),
//								Light:        pulumi.String("#FFEEEA"),
//								Main:         pulumi.String("#E1583E"),
//							},
//						},
//						Infos: frontegg.WorkspaceAdminPortalPaletteInfoArray{
//							&frontegg.WorkspaceAdminPortalPaletteInfoArgs{
//								ContrastText: pulumi.String("#eeeef0"),
//								Dark:         pulumi.String("#3c6492"),
//								Light:        pulumi.String("#E2EEF9"),
//								Main:         pulumi.String("#5587C0"),
//							},
//						},
//						Primaries: frontegg.WorkspaceAdminPortalPalettePrimaryArray{
//							&frontegg.WorkspaceAdminPortalPalettePrimaryArgs{
//								Active:       pulumi.String("#278854"),
//								ContrastText: pulumi.String("#eeeef0"),
//								Dark:         pulumi.String("#36A76A"),
//								Hover:        pulumi.String("#32A265"),
//								Light:        pulumi.String("#A2E1BF"),
//								Main:         pulumi.String("#43BB7A"),
//							},
//						},
//						Secondaries: frontegg.WorkspaceAdminPortalPaletteSecondaryArray{
//							&frontegg.WorkspaceAdminPortalPaletteSecondaryArgs{
//								Active:       pulumi.String("#E6ECF4"),
//								ContrastText: pulumi.String("#eeeef0"),
//								Dark:         pulumi.String("#E6ECF4"),
//								Hover:        pulumi.String("#F0F3F8"),
//								Light:        pulumi.String("#FBFBFC"),
//								Main:         pulumi.String("#FBFBFC"),
//							},
//						},
//						Successes: frontegg.WorkspaceAdminPortalPaletteSuccessArray{
//							&frontegg.WorkspaceAdminPortalPaletteSuccessArgs{
//								ContrastText: pulumi.String("#eeeef0"),
//								Dark:         pulumi.String("#1d7c30"),
//								Light:        pulumi.String("#E1F5E2"),
//								Main:         pulumi.String("#2CA744"),
//							},
//						},
//						Warnings: frontegg.WorkspaceAdminPortalPaletteWarningArray{
//							&frontegg.WorkspaceAdminPortalPaletteWarningArgs{
//								ContrastText: pulumi.String("#eeeef0"),
//								Dark:         pulumi.String("#EAE1C2"),
//								Light:        pulumi.String("#F9F4E2"),
//								Main:         pulumi.String("#A79D7B"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Workspace struct {
	pulumi.CustomResourceState

	// Configures the admin portal.
	AdminPortal WorkspaceAdminPortalOutput `pulumi:"adminPortal"`
	// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
	// responses.
	AllowedOrigins pulumi.StringArrayOutput `pulumi:"allowedOrigins"`
	// Configures the general authentication policy.
	AuthPolicy WorkspaceAuthPolicyOutput `pulumi:"authPolicy"`
	// The backend stack of the application associated with the workspace.
	BackendStack pulumi.StringOutput `pulumi:"backendStack"`
	// Configures the bot detection email.
	BotDetectionEmail WorkspaceBotDetectionEmailPtrOutput `pulumi:"botDetectionEmail"`
	// Configures the brute force protection email.
	BruteForceProtectionEmail WorkspaceBruteForceProtectionEmailPtrOutput `pulumi:"bruteForceProtectionEmail"`
	// Configures the bulk tenants invite email.
	BulkTenantsInvitesEmail WorkspaceBulkTenantsInvitesEmailPtrOutput `pulumi:"bulkTenantsInvitesEmail"`
	// Configures the CAPTCHA policy in the signup form.
	CaptchaPolicy WorkspaceCaptchaPolicyPtrOutput `pulumi:"captchaPolicy"`
	// The country associated with the workspace.
	Country pulumi.StringOutput `pulumi:"country"`
	// List of custom domains at which Frontegg services will be reachable. You must configure CNAME for each domain, you can
	// get record values from the portal.
	CustomDomains pulumi.StringArrayOutput `pulumi:"customDomains"`
	// Configures the verification email.
	EmailVerificationEmail WorkspaceEmailVerificationEmailPtrOutput `pulumi:"emailVerificationEmail"`
	// Configures social login with Facebook.
	FacebookSocialLogin WorkspaceFacebookSocialLoginPtrOutput `pulumi:"facebookSocialLogin"`
	// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
	// ".us.frontegg.com".
	FronteggDomain pulumi.StringOutput `pulumi:"fronteggDomain"`
	// The frontend stack of the application associated with the worksapce.
	FrontendStack pulumi.StringOutput `pulumi:"frontendStack"`
	// Configures social login with GitHub.
	GithubSocialLogin WorkspaceGithubSocialLoginPtrOutput `pulumi:"githubSocialLogin"`
	// Configures social login with Google.
	GoogleSocialLogin WorkspaceGoogleSocialLoginPtrOutput `pulumi:"googleSocialLogin"`
	// Configures Frontegg-hosted OAuth login.
	HostedLogin WorkspaceHostedLoginPtrOutput `pulumi:"hostedLogin"`
	// Configures the impossible travel email.
	ImpossibleTravelEmail WorkspaceImpossibleTravelEmailPtrOutput `pulumi:"impossibleTravelEmail"`
	// Configures the user lockout policy.
	LockoutPolicy WorkspaceLockoutPolicyPtrOutput `pulumi:"lockoutPolicy"`
	// Configures the one time code email.
	MagicCodeEmail WorkspaceMagicCodeEmailPtrOutput `pulumi:"magicCodeEmail"`
	// Configures the magic link email.
	MagicLinkEmail WorkspaceMagicLinkEmailPtrOutput `pulumi:"magicLinkEmail"`
	// Configures the multi-factor authentication (MFA) via an authentication app.
	MfaAuthenticationApp WorkspaceMfaAuthenticationAppPtrOutput `pulumi:"mfaAuthenticationApp"`
	// Configures the MFA enroll email.
	MfaEnrollEmail WorkspaceMfaEnrollEmailPtrOutput `pulumi:"mfaEnrollEmail"`
	// Configures the account challenge with code email.
	MfaOtcEmail WorkspaceMfaOtcEmailPtrOutput `pulumi:"mfaOtcEmail"`
	// Configures the multi-factor authentication (MFA) policy.
	MfaPolicy WorkspaceMfaPolicyOutput `pulumi:"mfaPolicy"`
	// Configures the MFA recovery code email.
	MfaRecoveryCodeEmail WorkspaceMfaRecoveryCodeEmailPtrOutput `pulumi:"mfaRecoveryCodeEmail"`
	// Configures the MFA unenroll email.
	MfaUnenrollEmail WorkspaceMfaUnenrollEmailPtrOutput `pulumi:"mfaUnenrollEmail"`
	// Configures social login with Google.
	MicrosoftSocialLogin WorkspaceMicrosoftSocialLoginPtrOutput `pulumi:"microsoftSocialLogin"`
	// The name of the workspace.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configures the new device connected email.
	NewDeviceConnectedEmail WorkspaceNewDeviceConnectedEmailPtrOutput `pulumi:"newDeviceConnectedEmail"`
	// Configures the new MFA method email.
	NewMfaMethodEmail WorkspaceNewMfaMethodEmailPtrOutput `pulumi:"newMfaMethodEmail"`
	// Configures SSO via OIDC.
	Oidc WorkspaceOidcPtrOutput `pulumi:"oidc"`
	// Whether the application associated with the workspace has OpenSaaS installed.
	OpenSaasInstalled pulumi.BoolOutput `pulumi:"openSaasInstalled"`
	// Configures the password policy.
	PasswordPolicy WorkspacePasswordPolicyOutput `pulumi:"passwordPolicy"`
	// Configures the pwned password email.
	PwnedPasswordEmail WorkspacePwnedPasswordEmailPtrOutput `pulumi:"pwnedPasswordEmail"`
	// Configures the remove MFA method email.
	RemoveMfaMethodEmail WorkspaceRemoveMfaMethodEmailPtrOutput `pulumi:"removeMfaMethodEmail"`
	// Configures the password reset email.
	ResetPasswordEmail WorkspaceResetPasswordEmailPtrOutput `pulumi:"resetPasswordEmail"`
	// Configures the reset phone number email.
	ResetPhoneNumberEmail WorkspaceResetPhoneNumberEmailPtrOutput `pulumi:"resetPhoneNumberEmail"`
	// Configures SSO via SAML.
	Saml WorkspaceSamlPtrOutput `pulumi:"saml"`
	// Configures the SMS authentication enabled email.
	SmsAuthenticationEnabledEmail WorkspaceSmsAuthenticationEnabledEmailPtrOutput `pulumi:"smsAuthenticationEnabledEmail"`
	// Configures how SSO domains are validated.
	SsoDomainPolicy WorkspaceSsoDomainPolicyPtrOutput `pulumi:"ssoDomainPolicy"`
	// Configures how multiple tenants can claim the same SSO domain.
	SsoMultiTenantPolicy WorkspaceSsoMultiTenantPolicyPtrOutput `pulumi:"ssoMultiTenantPolicy"`
	// Configures the suspicious IP email.
	SuspiciousIpEmail WorkspaceSuspiciousIpEmailPtrOutput `pulumi:"suspiciousIpEmail"`
	// Configures the user activation email.
	UserActivationEmail WorkspaceUserActivationEmailPtrOutput `pulumi:"userActivationEmail"`
	// Configures the user invitation email.
	UserInvitationEmail WorkspaceUserInvitationEmailPtrOutput `pulumi:"userInvitationEmail"`
	// Configures the user used invitation email.
	UserUsedInvitationEmail WorkspaceUserUsedInvitationEmailPtrOutput `pulumi:"userUsedInvitationEmail"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminPortal == nil {
		return nil, errors.New("invalid value for required argument 'AdminPortal'")
	}
	if args.AllowedOrigins == nil {
		return nil, errors.New("invalid value for required argument 'AllowedOrigins'")
	}
	if args.AuthPolicy == nil {
		return nil, errors.New("invalid value for required argument 'AuthPolicy'")
	}
	if args.BackendStack == nil {
		return nil, errors.New("invalid value for required argument 'BackendStack'")
	}
	if args.Country == nil {
		return nil, errors.New("invalid value for required argument 'Country'")
	}
	if args.FronteggDomain == nil {
		return nil, errors.New("invalid value for required argument 'FronteggDomain'")
	}
	if args.FrontendStack == nil {
		return nil, errors.New("invalid value for required argument 'FrontendStack'")
	}
	if args.MfaPolicy == nil {
		return nil, errors.New("invalid value for required argument 'MfaPolicy'")
	}
	if args.OpenSaasInstalled == nil {
		return nil, errors.New("invalid value for required argument 'OpenSaasInstalled'")
	}
	if args.PasswordPolicy == nil {
		return nil, errors.New("invalid value for required argument 'PasswordPolicy'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workspace
	err := ctx.RegisterResource("frontegg:index/workspace:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("frontegg:index/workspace:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
	// Configures the admin portal.
	AdminPortal *WorkspaceAdminPortal `pulumi:"adminPortal"`
	// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
	// responses.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// Configures the general authentication policy.
	AuthPolicy *WorkspaceAuthPolicy `pulumi:"authPolicy"`
	// The backend stack of the application associated with the workspace.
	BackendStack *string `pulumi:"backendStack"`
	// Configures the bot detection email.
	BotDetectionEmail *WorkspaceBotDetectionEmail `pulumi:"botDetectionEmail"`
	// Configures the brute force protection email.
	BruteForceProtectionEmail *WorkspaceBruteForceProtectionEmail `pulumi:"bruteForceProtectionEmail"`
	// Configures the bulk tenants invite email.
	BulkTenantsInvitesEmail *WorkspaceBulkTenantsInvitesEmail `pulumi:"bulkTenantsInvitesEmail"`
	// Configures the CAPTCHA policy in the signup form.
	CaptchaPolicy *WorkspaceCaptchaPolicy `pulumi:"captchaPolicy"`
	// The country associated with the workspace.
	Country *string `pulumi:"country"`
	// List of custom domains at which Frontegg services will be reachable. You must configure CNAME for each domain, you can
	// get record values from the portal.
	CustomDomains []string `pulumi:"customDomains"`
	// Configures the verification email.
	EmailVerificationEmail *WorkspaceEmailVerificationEmail `pulumi:"emailVerificationEmail"`
	// Configures social login with Facebook.
	FacebookSocialLogin *WorkspaceFacebookSocialLogin `pulumi:"facebookSocialLogin"`
	// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
	// ".us.frontegg.com".
	FronteggDomain *string `pulumi:"fronteggDomain"`
	// The frontend stack of the application associated with the worksapce.
	FrontendStack *string `pulumi:"frontendStack"`
	// Configures social login with GitHub.
	GithubSocialLogin *WorkspaceGithubSocialLogin `pulumi:"githubSocialLogin"`
	// Configures social login with Google.
	GoogleSocialLogin *WorkspaceGoogleSocialLogin `pulumi:"googleSocialLogin"`
	// Configures Frontegg-hosted OAuth login.
	HostedLogin *WorkspaceHostedLogin `pulumi:"hostedLogin"`
	// Configures the impossible travel email.
	ImpossibleTravelEmail *WorkspaceImpossibleTravelEmail `pulumi:"impossibleTravelEmail"`
	// Configures the user lockout policy.
	LockoutPolicy *WorkspaceLockoutPolicy `pulumi:"lockoutPolicy"`
	// Configures the one time code email.
	MagicCodeEmail *WorkspaceMagicCodeEmail `pulumi:"magicCodeEmail"`
	// Configures the magic link email.
	MagicLinkEmail *WorkspaceMagicLinkEmail `pulumi:"magicLinkEmail"`
	// Configures the multi-factor authentication (MFA) via an authentication app.
	MfaAuthenticationApp *WorkspaceMfaAuthenticationApp `pulumi:"mfaAuthenticationApp"`
	// Configures the MFA enroll email.
	MfaEnrollEmail *WorkspaceMfaEnrollEmail `pulumi:"mfaEnrollEmail"`
	// Configures the account challenge with code email.
	MfaOtcEmail *WorkspaceMfaOtcEmail `pulumi:"mfaOtcEmail"`
	// Configures the multi-factor authentication (MFA) policy.
	MfaPolicy *WorkspaceMfaPolicy `pulumi:"mfaPolicy"`
	// Configures the MFA recovery code email.
	MfaRecoveryCodeEmail *WorkspaceMfaRecoveryCodeEmail `pulumi:"mfaRecoveryCodeEmail"`
	// Configures the MFA unenroll email.
	MfaUnenrollEmail *WorkspaceMfaUnenrollEmail `pulumi:"mfaUnenrollEmail"`
	// Configures social login with Google.
	MicrosoftSocialLogin *WorkspaceMicrosoftSocialLogin `pulumi:"microsoftSocialLogin"`
	// The name of the workspace.
	Name *string `pulumi:"name"`
	// Configures the new device connected email.
	NewDeviceConnectedEmail *WorkspaceNewDeviceConnectedEmail `pulumi:"newDeviceConnectedEmail"`
	// Configures the new MFA method email.
	NewMfaMethodEmail *WorkspaceNewMfaMethodEmail `pulumi:"newMfaMethodEmail"`
	// Configures SSO via OIDC.
	Oidc *WorkspaceOidc `pulumi:"oidc"`
	// Whether the application associated with the workspace has OpenSaaS installed.
	OpenSaasInstalled *bool `pulumi:"openSaasInstalled"`
	// Configures the password policy.
	PasswordPolicy *WorkspacePasswordPolicy `pulumi:"passwordPolicy"`
	// Configures the pwned password email.
	PwnedPasswordEmail *WorkspacePwnedPasswordEmail `pulumi:"pwnedPasswordEmail"`
	// Configures the remove MFA method email.
	RemoveMfaMethodEmail *WorkspaceRemoveMfaMethodEmail `pulumi:"removeMfaMethodEmail"`
	// Configures the password reset email.
	ResetPasswordEmail *WorkspaceResetPasswordEmail `pulumi:"resetPasswordEmail"`
	// Configures the reset phone number email.
	ResetPhoneNumberEmail *WorkspaceResetPhoneNumberEmail `pulumi:"resetPhoneNumberEmail"`
	// Configures SSO via SAML.
	Saml *WorkspaceSaml `pulumi:"saml"`
	// Configures the SMS authentication enabled email.
	SmsAuthenticationEnabledEmail *WorkspaceSmsAuthenticationEnabledEmail `pulumi:"smsAuthenticationEnabledEmail"`
	// Configures how SSO domains are validated.
	SsoDomainPolicy *WorkspaceSsoDomainPolicy `pulumi:"ssoDomainPolicy"`
	// Configures how multiple tenants can claim the same SSO domain.
	SsoMultiTenantPolicy *WorkspaceSsoMultiTenantPolicy `pulumi:"ssoMultiTenantPolicy"`
	// Configures the suspicious IP email.
	SuspiciousIpEmail *WorkspaceSuspiciousIpEmail `pulumi:"suspiciousIpEmail"`
	// Configures the user activation email.
	UserActivationEmail *WorkspaceUserActivationEmail `pulumi:"userActivationEmail"`
	// Configures the user invitation email.
	UserInvitationEmail *WorkspaceUserInvitationEmail `pulumi:"userInvitationEmail"`
	// Configures the user used invitation email.
	UserUsedInvitationEmail *WorkspaceUserUsedInvitationEmail `pulumi:"userUsedInvitationEmail"`
}

type WorkspaceState struct {
	// Configures the admin portal.
	AdminPortal WorkspaceAdminPortalPtrInput
	// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
	// responses.
	AllowedOrigins pulumi.StringArrayInput
	// Configures the general authentication policy.
	AuthPolicy WorkspaceAuthPolicyPtrInput
	// The backend stack of the application associated with the workspace.
	BackendStack pulumi.StringPtrInput
	// Configures the bot detection email.
	BotDetectionEmail WorkspaceBotDetectionEmailPtrInput
	// Configures the brute force protection email.
	BruteForceProtectionEmail WorkspaceBruteForceProtectionEmailPtrInput
	// Configures the bulk tenants invite email.
	BulkTenantsInvitesEmail WorkspaceBulkTenantsInvitesEmailPtrInput
	// Configures the CAPTCHA policy in the signup form.
	CaptchaPolicy WorkspaceCaptchaPolicyPtrInput
	// The country associated with the workspace.
	Country pulumi.StringPtrInput
	// List of custom domains at which Frontegg services will be reachable. You must configure CNAME for each domain, you can
	// get record values from the portal.
	CustomDomains pulumi.StringArrayInput
	// Configures the verification email.
	EmailVerificationEmail WorkspaceEmailVerificationEmailPtrInput
	// Configures social login with Facebook.
	FacebookSocialLogin WorkspaceFacebookSocialLoginPtrInput
	// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
	// ".us.frontegg.com".
	FronteggDomain pulumi.StringPtrInput
	// The frontend stack of the application associated with the worksapce.
	FrontendStack pulumi.StringPtrInput
	// Configures social login with GitHub.
	GithubSocialLogin WorkspaceGithubSocialLoginPtrInput
	// Configures social login with Google.
	GoogleSocialLogin WorkspaceGoogleSocialLoginPtrInput
	// Configures Frontegg-hosted OAuth login.
	HostedLogin WorkspaceHostedLoginPtrInput
	// Configures the impossible travel email.
	ImpossibleTravelEmail WorkspaceImpossibleTravelEmailPtrInput
	// Configures the user lockout policy.
	LockoutPolicy WorkspaceLockoutPolicyPtrInput
	// Configures the one time code email.
	MagicCodeEmail WorkspaceMagicCodeEmailPtrInput
	// Configures the magic link email.
	MagicLinkEmail WorkspaceMagicLinkEmailPtrInput
	// Configures the multi-factor authentication (MFA) via an authentication app.
	MfaAuthenticationApp WorkspaceMfaAuthenticationAppPtrInput
	// Configures the MFA enroll email.
	MfaEnrollEmail WorkspaceMfaEnrollEmailPtrInput
	// Configures the account challenge with code email.
	MfaOtcEmail WorkspaceMfaOtcEmailPtrInput
	// Configures the multi-factor authentication (MFA) policy.
	MfaPolicy WorkspaceMfaPolicyPtrInput
	// Configures the MFA recovery code email.
	MfaRecoveryCodeEmail WorkspaceMfaRecoveryCodeEmailPtrInput
	// Configures the MFA unenroll email.
	MfaUnenrollEmail WorkspaceMfaUnenrollEmailPtrInput
	// Configures social login with Google.
	MicrosoftSocialLogin WorkspaceMicrosoftSocialLoginPtrInput
	// The name of the workspace.
	Name pulumi.StringPtrInput
	// Configures the new device connected email.
	NewDeviceConnectedEmail WorkspaceNewDeviceConnectedEmailPtrInput
	// Configures the new MFA method email.
	NewMfaMethodEmail WorkspaceNewMfaMethodEmailPtrInput
	// Configures SSO via OIDC.
	Oidc WorkspaceOidcPtrInput
	// Whether the application associated with the workspace has OpenSaaS installed.
	OpenSaasInstalled pulumi.BoolPtrInput
	// Configures the password policy.
	PasswordPolicy WorkspacePasswordPolicyPtrInput
	// Configures the pwned password email.
	PwnedPasswordEmail WorkspacePwnedPasswordEmailPtrInput
	// Configures the remove MFA method email.
	RemoveMfaMethodEmail WorkspaceRemoveMfaMethodEmailPtrInput
	// Configures the password reset email.
	ResetPasswordEmail WorkspaceResetPasswordEmailPtrInput
	// Configures the reset phone number email.
	ResetPhoneNumberEmail WorkspaceResetPhoneNumberEmailPtrInput
	// Configures SSO via SAML.
	Saml WorkspaceSamlPtrInput
	// Configures the SMS authentication enabled email.
	SmsAuthenticationEnabledEmail WorkspaceSmsAuthenticationEnabledEmailPtrInput
	// Configures how SSO domains are validated.
	SsoDomainPolicy WorkspaceSsoDomainPolicyPtrInput
	// Configures how multiple tenants can claim the same SSO domain.
	SsoMultiTenantPolicy WorkspaceSsoMultiTenantPolicyPtrInput
	// Configures the suspicious IP email.
	SuspiciousIpEmail WorkspaceSuspiciousIpEmailPtrInput
	// Configures the user activation email.
	UserActivationEmail WorkspaceUserActivationEmailPtrInput
	// Configures the user invitation email.
	UserInvitationEmail WorkspaceUserInvitationEmailPtrInput
	// Configures the user used invitation email.
	UserUsedInvitationEmail WorkspaceUserUsedInvitationEmailPtrInput
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	// Configures the admin portal.
	AdminPortal WorkspaceAdminPortal `pulumi:"adminPortal"`
	// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
	// responses.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// Configures the general authentication policy.
	AuthPolicy WorkspaceAuthPolicy `pulumi:"authPolicy"`
	// The backend stack of the application associated with the workspace.
	BackendStack string `pulumi:"backendStack"`
	// Configures the bot detection email.
	BotDetectionEmail *WorkspaceBotDetectionEmail `pulumi:"botDetectionEmail"`
	// Configures the brute force protection email.
	BruteForceProtectionEmail *WorkspaceBruteForceProtectionEmail `pulumi:"bruteForceProtectionEmail"`
	// Configures the bulk tenants invite email.
	BulkTenantsInvitesEmail *WorkspaceBulkTenantsInvitesEmail `pulumi:"bulkTenantsInvitesEmail"`
	// Configures the CAPTCHA policy in the signup form.
	CaptchaPolicy *WorkspaceCaptchaPolicy `pulumi:"captchaPolicy"`
	// The country associated with the workspace.
	Country string `pulumi:"country"`
	// List of custom domains at which Frontegg services will be reachable. You must configure CNAME for each domain, you can
	// get record values from the portal.
	CustomDomains []string `pulumi:"customDomains"`
	// Configures the verification email.
	EmailVerificationEmail *WorkspaceEmailVerificationEmail `pulumi:"emailVerificationEmail"`
	// Configures social login with Facebook.
	FacebookSocialLogin *WorkspaceFacebookSocialLogin `pulumi:"facebookSocialLogin"`
	// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
	// ".us.frontegg.com".
	FronteggDomain string `pulumi:"fronteggDomain"`
	// The frontend stack of the application associated with the worksapce.
	FrontendStack string `pulumi:"frontendStack"`
	// Configures social login with GitHub.
	GithubSocialLogin *WorkspaceGithubSocialLogin `pulumi:"githubSocialLogin"`
	// Configures social login with Google.
	GoogleSocialLogin *WorkspaceGoogleSocialLogin `pulumi:"googleSocialLogin"`
	// Configures Frontegg-hosted OAuth login.
	HostedLogin *WorkspaceHostedLogin `pulumi:"hostedLogin"`
	// Configures the impossible travel email.
	ImpossibleTravelEmail *WorkspaceImpossibleTravelEmail `pulumi:"impossibleTravelEmail"`
	// Configures the user lockout policy.
	LockoutPolicy *WorkspaceLockoutPolicy `pulumi:"lockoutPolicy"`
	// Configures the one time code email.
	MagicCodeEmail *WorkspaceMagicCodeEmail `pulumi:"magicCodeEmail"`
	// Configures the magic link email.
	MagicLinkEmail *WorkspaceMagicLinkEmail `pulumi:"magicLinkEmail"`
	// Configures the multi-factor authentication (MFA) via an authentication app.
	MfaAuthenticationApp *WorkspaceMfaAuthenticationApp `pulumi:"mfaAuthenticationApp"`
	// Configures the MFA enroll email.
	MfaEnrollEmail *WorkspaceMfaEnrollEmail `pulumi:"mfaEnrollEmail"`
	// Configures the account challenge with code email.
	MfaOtcEmail *WorkspaceMfaOtcEmail `pulumi:"mfaOtcEmail"`
	// Configures the multi-factor authentication (MFA) policy.
	MfaPolicy WorkspaceMfaPolicy `pulumi:"mfaPolicy"`
	// Configures the MFA recovery code email.
	MfaRecoveryCodeEmail *WorkspaceMfaRecoveryCodeEmail `pulumi:"mfaRecoveryCodeEmail"`
	// Configures the MFA unenroll email.
	MfaUnenrollEmail *WorkspaceMfaUnenrollEmail `pulumi:"mfaUnenrollEmail"`
	// Configures social login with Google.
	MicrosoftSocialLogin *WorkspaceMicrosoftSocialLogin `pulumi:"microsoftSocialLogin"`
	// The name of the workspace.
	Name *string `pulumi:"name"`
	// Configures the new device connected email.
	NewDeviceConnectedEmail *WorkspaceNewDeviceConnectedEmail `pulumi:"newDeviceConnectedEmail"`
	// Configures the new MFA method email.
	NewMfaMethodEmail *WorkspaceNewMfaMethodEmail `pulumi:"newMfaMethodEmail"`
	// Configures SSO via OIDC.
	Oidc *WorkspaceOidc `pulumi:"oidc"`
	// Whether the application associated with the workspace has OpenSaaS installed.
	OpenSaasInstalled bool `pulumi:"openSaasInstalled"`
	// Configures the password policy.
	PasswordPolicy WorkspacePasswordPolicy `pulumi:"passwordPolicy"`
	// Configures the pwned password email.
	PwnedPasswordEmail *WorkspacePwnedPasswordEmail `pulumi:"pwnedPasswordEmail"`
	// Configures the remove MFA method email.
	RemoveMfaMethodEmail *WorkspaceRemoveMfaMethodEmail `pulumi:"removeMfaMethodEmail"`
	// Configures the password reset email.
	ResetPasswordEmail *WorkspaceResetPasswordEmail `pulumi:"resetPasswordEmail"`
	// Configures the reset phone number email.
	ResetPhoneNumberEmail *WorkspaceResetPhoneNumberEmail `pulumi:"resetPhoneNumberEmail"`
	// Configures SSO via SAML.
	Saml *WorkspaceSaml `pulumi:"saml"`
	// Configures the SMS authentication enabled email.
	SmsAuthenticationEnabledEmail *WorkspaceSmsAuthenticationEnabledEmail `pulumi:"smsAuthenticationEnabledEmail"`
	// Configures how SSO domains are validated.
	SsoDomainPolicy *WorkspaceSsoDomainPolicy `pulumi:"ssoDomainPolicy"`
	// Configures how multiple tenants can claim the same SSO domain.
	SsoMultiTenantPolicy *WorkspaceSsoMultiTenantPolicy `pulumi:"ssoMultiTenantPolicy"`
	// Configures the suspicious IP email.
	SuspiciousIpEmail *WorkspaceSuspiciousIpEmail `pulumi:"suspiciousIpEmail"`
	// Configures the user activation email.
	UserActivationEmail *WorkspaceUserActivationEmail `pulumi:"userActivationEmail"`
	// Configures the user invitation email.
	UserInvitationEmail *WorkspaceUserInvitationEmail `pulumi:"userInvitationEmail"`
	// Configures the user used invitation email.
	UserUsedInvitationEmail *WorkspaceUserUsedInvitationEmail `pulumi:"userUsedInvitationEmail"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	// Configures the admin portal.
	AdminPortal WorkspaceAdminPortalInput
	// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
	// responses.
	AllowedOrigins pulumi.StringArrayInput
	// Configures the general authentication policy.
	AuthPolicy WorkspaceAuthPolicyInput
	// The backend stack of the application associated with the workspace.
	BackendStack pulumi.StringInput
	// Configures the bot detection email.
	BotDetectionEmail WorkspaceBotDetectionEmailPtrInput
	// Configures the brute force protection email.
	BruteForceProtectionEmail WorkspaceBruteForceProtectionEmailPtrInput
	// Configures the bulk tenants invite email.
	BulkTenantsInvitesEmail WorkspaceBulkTenantsInvitesEmailPtrInput
	// Configures the CAPTCHA policy in the signup form.
	CaptchaPolicy WorkspaceCaptchaPolicyPtrInput
	// The country associated with the workspace.
	Country pulumi.StringInput
	// List of custom domains at which Frontegg services will be reachable. You must configure CNAME for each domain, you can
	// get record values from the portal.
	CustomDomains pulumi.StringArrayInput
	// Configures the verification email.
	EmailVerificationEmail WorkspaceEmailVerificationEmailPtrInput
	// Configures social login with Facebook.
	FacebookSocialLogin WorkspaceFacebookSocialLoginPtrInput
	// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
	// ".us.frontegg.com".
	FronteggDomain pulumi.StringInput
	// The frontend stack of the application associated with the worksapce.
	FrontendStack pulumi.StringInput
	// Configures social login with GitHub.
	GithubSocialLogin WorkspaceGithubSocialLoginPtrInput
	// Configures social login with Google.
	GoogleSocialLogin WorkspaceGoogleSocialLoginPtrInput
	// Configures Frontegg-hosted OAuth login.
	HostedLogin WorkspaceHostedLoginPtrInput
	// Configures the impossible travel email.
	ImpossibleTravelEmail WorkspaceImpossibleTravelEmailPtrInput
	// Configures the user lockout policy.
	LockoutPolicy WorkspaceLockoutPolicyPtrInput
	// Configures the one time code email.
	MagicCodeEmail WorkspaceMagicCodeEmailPtrInput
	// Configures the magic link email.
	MagicLinkEmail WorkspaceMagicLinkEmailPtrInput
	// Configures the multi-factor authentication (MFA) via an authentication app.
	MfaAuthenticationApp WorkspaceMfaAuthenticationAppPtrInput
	// Configures the MFA enroll email.
	MfaEnrollEmail WorkspaceMfaEnrollEmailPtrInput
	// Configures the account challenge with code email.
	MfaOtcEmail WorkspaceMfaOtcEmailPtrInput
	// Configures the multi-factor authentication (MFA) policy.
	MfaPolicy WorkspaceMfaPolicyInput
	// Configures the MFA recovery code email.
	MfaRecoveryCodeEmail WorkspaceMfaRecoveryCodeEmailPtrInput
	// Configures the MFA unenroll email.
	MfaUnenrollEmail WorkspaceMfaUnenrollEmailPtrInput
	// Configures social login with Google.
	MicrosoftSocialLogin WorkspaceMicrosoftSocialLoginPtrInput
	// The name of the workspace.
	Name pulumi.StringPtrInput
	// Configures the new device connected email.
	NewDeviceConnectedEmail WorkspaceNewDeviceConnectedEmailPtrInput
	// Configures the new MFA method email.
	NewMfaMethodEmail WorkspaceNewMfaMethodEmailPtrInput
	// Configures SSO via OIDC.
	Oidc WorkspaceOidcPtrInput
	// Whether the application associated with the workspace has OpenSaaS installed.
	OpenSaasInstalled pulumi.BoolInput
	// Configures the password policy.
	PasswordPolicy WorkspacePasswordPolicyInput
	// Configures the pwned password email.
	PwnedPasswordEmail WorkspacePwnedPasswordEmailPtrInput
	// Configures the remove MFA method email.
	RemoveMfaMethodEmail WorkspaceRemoveMfaMethodEmailPtrInput
	// Configures the password reset email.
	ResetPasswordEmail WorkspaceResetPasswordEmailPtrInput
	// Configures the reset phone number email.
	ResetPhoneNumberEmail WorkspaceResetPhoneNumberEmailPtrInput
	// Configures SSO via SAML.
	Saml WorkspaceSamlPtrInput
	// Configures the SMS authentication enabled email.
	SmsAuthenticationEnabledEmail WorkspaceSmsAuthenticationEnabledEmailPtrInput
	// Configures how SSO domains are validated.
	SsoDomainPolicy WorkspaceSsoDomainPolicyPtrInput
	// Configures how multiple tenants can claim the same SSO domain.
	SsoMultiTenantPolicy WorkspaceSsoMultiTenantPolicyPtrInput
	// Configures the suspicious IP email.
	SuspiciousIpEmail WorkspaceSuspiciousIpEmailPtrInput
	// Configures the user activation email.
	UserActivationEmail WorkspaceUserActivationEmailPtrInput
	// Configures the user invitation email.
	UserInvitationEmail WorkspaceUserInvitationEmailPtrInput
	// Configures the user used invitation email.
	UserUsedInvitationEmail WorkspaceUserUsedInvitationEmailPtrInput
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}

type WorkspaceInput interface {
	pulumi.Input

	ToWorkspaceOutput() WorkspaceOutput
	ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput
}

func (*Workspace) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (i *Workspace) ToWorkspaceOutput() WorkspaceOutput {
	return i.ToWorkspaceOutputWithContext(context.Background())
}

func (i *Workspace) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceOutput)
}

// WorkspaceArrayInput is an input type that accepts WorkspaceArray and WorkspaceArrayOutput values.
// You can construct a concrete instance of `WorkspaceArrayInput` via:
//
//	WorkspaceArray{ WorkspaceArgs{...} }
type WorkspaceArrayInput interface {
	pulumi.Input

	ToWorkspaceArrayOutput() WorkspaceArrayOutput
	ToWorkspaceArrayOutputWithContext(context.Context) WorkspaceArrayOutput
}

type WorkspaceArray []WorkspaceInput

func (WorkspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (i WorkspaceArray) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return i.ToWorkspaceArrayOutputWithContext(context.Background())
}

func (i WorkspaceArray) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceArrayOutput)
}

// WorkspaceMapInput is an input type that accepts WorkspaceMap and WorkspaceMapOutput values.
// You can construct a concrete instance of `WorkspaceMapInput` via:
//
//	WorkspaceMap{ "key": WorkspaceArgs{...} }
type WorkspaceMapInput interface {
	pulumi.Input

	ToWorkspaceMapOutput() WorkspaceMapOutput
	ToWorkspaceMapOutputWithContext(context.Context) WorkspaceMapOutput
}

type WorkspaceMap map[string]WorkspaceInput

func (WorkspaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (i WorkspaceMap) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return i.ToWorkspaceMapOutputWithContext(context.Background())
}

func (i WorkspaceMap) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceMapOutput)
}

type WorkspaceOutput struct{ *pulumi.OutputState }

func (WorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (o WorkspaceOutput) ToWorkspaceOutput() WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return o
}

// Configures the admin portal.
func (o WorkspaceOutput) AdminPortal() WorkspaceAdminPortalOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceAdminPortalOutput { return v.AdminPortal }).(WorkspaceAdminPortalOutput)
}

// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
// responses.
func (o WorkspaceOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

// Configures the general authentication policy.
func (o WorkspaceOutput) AuthPolicy() WorkspaceAuthPolicyOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceAuthPolicyOutput { return v.AuthPolicy }).(WorkspaceAuthPolicyOutput)
}

// The backend stack of the application associated with the workspace.
func (o WorkspaceOutput) BackendStack() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.BackendStack }).(pulumi.StringOutput)
}

// Configures the bot detection email.
func (o WorkspaceOutput) BotDetectionEmail() WorkspaceBotDetectionEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceBotDetectionEmailPtrOutput { return v.BotDetectionEmail }).(WorkspaceBotDetectionEmailPtrOutput)
}

// Configures the brute force protection email.
func (o WorkspaceOutput) BruteForceProtectionEmail() WorkspaceBruteForceProtectionEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceBruteForceProtectionEmailPtrOutput { return v.BruteForceProtectionEmail }).(WorkspaceBruteForceProtectionEmailPtrOutput)
}

// Configures the bulk tenants invite email.
func (o WorkspaceOutput) BulkTenantsInvitesEmail() WorkspaceBulkTenantsInvitesEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceBulkTenantsInvitesEmailPtrOutput { return v.BulkTenantsInvitesEmail }).(WorkspaceBulkTenantsInvitesEmailPtrOutput)
}

// Configures the CAPTCHA policy in the signup form.
func (o WorkspaceOutput) CaptchaPolicy() WorkspaceCaptchaPolicyPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceCaptchaPolicyPtrOutput { return v.CaptchaPolicy }).(WorkspaceCaptchaPolicyPtrOutput)
}

// The country associated with the workspace.
func (o WorkspaceOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Country }).(pulumi.StringOutput)
}

// List of custom domains at which Frontegg services will be reachable. You must configure CNAME for each domain, you can
// get record values from the portal.
func (o WorkspaceOutput) CustomDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringArrayOutput { return v.CustomDomains }).(pulumi.StringArrayOutput)
}

// Configures the verification email.
func (o WorkspaceOutput) EmailVerificationEmail() WorkspaceEmailVerificationEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceEmailVerificationEmailPtrOutput { return v.EmailVerificationEmail }).(WorkspaceEmailVerificationEmailPtrOutput)
}

// Configures social login with Facebook.
func (o WorkspaceOutput) FacebookSocialLogin() WorkspaceFacebookSocialLoginPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceFacebookSocialLoginPtrOutput { return v.FacebookSocialLogin }).(WorkspaceFacebookSocialLoginPtrOutput)
}

// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
// ".us.frontegg.com".
func (o WorkspaceOutput) FronteggDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.FronteggDomain }).(pulumi.StringOutput)
}

// The frontend stack of the application associated with the worksapce.
func (o WorkspaceOutput) FrontendStack() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.FrontendStack }).(pulumi.StringOutput)
}

// Configures social login with GitHub.
func (o WorkspaceOutput) GithubSocialLogin() WorkspaceGithubSocialLoginPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceGithubSocialLoginPtrOutput { return v.GithubSocialLogin }).(WorkspaceGithubSocialLoginPtrOutput)
}

// Configures social login with Google.
func (o WorkspaceOutput) GoogleSocialLogin() WorkspaceGoogleSocialLoginPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceGoogleSocialLoginPtrOutput { return v.GoogleSocialLogin }).(WorkspaceGoogleSocialLoginPtrOutput)
}

// Configures Frontegg-hosted OAuth login.
func (o WorkspaceOutput) HostedLogin() WorkspaceHostedLoginPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceHostedLoginPtrOutput { return v.HostedLogin }).(WorkspaceHostedLoginPtrOutput)
}

// Configures the impossible travel email.
func (o WorkspaceOutput) ImpossibleTravelEmail() WorkspaceImpossibleTravelEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceImpossibleTravelEmailPtrOutput { return v.ImpossibleTravelEmail }).(WorkspaceImpossibleTravelEmailPtrOutput)
}

// Configures the user lockout policy.
func (o WorkspaceOutput) LockoutPolicy() WorkspaceLockoutPolicyPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceLockoutPolicyPtrOutput { return v.LockoutPolicy }).(WorkspaceLockoutPolicyPtrOutput)
}

// Configures the one time code email.
func (o WorkspaceOutput) MagicCodeEmail() WorkspaceMagicCodeEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceMagicCodeEmailPtrOutput { return v.MagicCodeEmail }).(WorkspaceMagicCodeEmailPtrOutput)
}

// Configures the magic link email.
func (o WorkspaceOutput) MagicLinkEmail() WorkspaceMagicLinkEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceMagicLinkEmailPtrOutput { return v.MagicLinkEmail }).(WorkspaceMagicLinkEmailPtrOutput)
}

// Configures the multi-factor authentication (MFA) via an authentication app.
func (o WorkspaceOutput) MfaAuthenticationApp() WorkspaceMfaAuthenticationAppPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceMfaAuthenticationAppPtrOutput { return v.MfaAuthenticationApp }).(WorkspaceMfaAuthenticationAppPtrOutput)
}

// Configures the MFA enroll email.
func (o WorkspaceOutput) MfaEnrollEmail() WorkspaceMfaEnrollEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceMfaEnrollEmailPtrOutput { return v.MfaEnrollEmail }).(WorkspaceMfaEnrollEmailPtrOutput)
}

// Configures the account challenge with code email.
func (o WorkspaceOutput) MfaOtcEmail() WorkspaceMfaOtcEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceMfaOtcEmailPtrOutput { return v.MfaOtcEmail }).(WorkspaceMfaOtcEmailPtrOutput)
}

// Configures the multi-factor authentication (MFA) policy.
func (o WorkspaceOutput) MfaPolicy() WorkspaceMfaPolicyOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceMfaPolicyOutput { return v.MfaPolicy }).(WorkspaceMfaPolicyOutput)
}

// Configures the MFA recovery code email.
func (o WorkspaceOutput) MfaRecoveryCodeEmail() WorkspaceMfaRecoveryCodeEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceMfaRecoveryCodeEmailPtrOutput { return v.MfaRecoveryCodeEmail }).(WorkspaceMfaRecoveryCodeEmailPtrOutput)
}

// Configures the MFA unenroll email.
func (o WorkspaceOutput) MfaUnenrollEmail() WorkspaceMfaUnenrollEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceMfaUnenrollEmailPtrOutput { return v.MfaUnenrollEmail }).(WorkspaceMfaUnenrollEmailPtrOutput)
}

// Configures social login with Google.
func (o WorkspaceOutput) MicrosoftSocialLogin() WorkspaceMicrosoftSocialLoginPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceMicrosoftSocialLoginPtrOutput { return v.MicrosoftSocialLogin }).(WorkspaceMicrosoftSocialLoginPtrOutput)
}

// The name of the workspace.
func (o WorkspaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Workspace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configures the new device connected email.
func (o WorkspaceOutput) NewDeviceConnectedEmail() WorkspaceNewDeviceConnectedEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceNewDeviceConnectedEmailPtrOutput { return v.NewDeviceConnectedEmail }).(WorkspaceNewDeviceConnectedEmailPtrOutput)
}

// Configures the new MFA method email.
func (o WorkspaceOutput) NewMfaMethodEmail() WorkspaceNewMfaMethodEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceNewMfaMethodEmailPtrOutput { return v.NewMfaMethodEmail }).(WorkspaceNewMfaMethodEmailPtrOutput)
}

// Configures SSO via OIDC.
func (o WorkspaceOutput) Oidc() WorkspaceOidcPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceOidcPtrOutput { return v.Oidc }).(WorkspaceOidcPtrOutput)
}

// Whether the application associated with the workspace has OpenSaaS installed.
func (o WorkspaceOutput) OpenSaasInstalled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Workspace) pulumi.BoolOutput { return v.OpenSaasInstalled }).(pulumi.BoolOutput)
}

// Configures the password policy.
func (o WorkspaceOutput) PasswordPolicy() WorkspacePasswordPolicyOutput {
	return o.ApplyT(func(v *Workspace) WorkspacePasswordPolicyOutput { return v.PasswordPolicy }).(WorkspacePasswordPolicyOutput)
}

// Configures the pwned password email.
func (o WorkspaceOutput) PwnedPasswordEmail() WorkspacePwnedPasswordEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspacePwnedPasswordEmailPtrOutput { return v.PwnedPasswordEmail }).(WorkspacePwnedPasswordEmailPtrOutput)
}

// Configures the remove MFA method email.
func (o WorkspaceOutput) RemoveMfaMethodEmail() WorkspaceRemoveMfaMethodEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceRemoveMfaMethodEmailPtrOutput { return v.RemoveMfaMethodEmail }).(WorkspaceRemoveMfaMethodEmailPtrOutput)
}

// Configures the password reset email.
func (o WorkspaceOutput) ResetPasswordEmail() WorkspaceResetPasswordEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceResetPasswordEmailPtrOutput { return v.ResetPasswordEmail }).(WorkspaceResetPasswordEmailPtrOutput)
}

// Configures the reset phone number email.
func (o WorkspaceOutput) ResetPhoneNumberEmail() WorkspaceResetPhoneNumberEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceResetPhoneNumberEmailPtrOutput { return v.ResetPhoneNumberEmail }).(WorkspaceResetPhoneNumberEmailPtrOutput)
}

// Configures SSO via SAML.
func (o WorkspaceOutput) Saml() WorkspaceSamlPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceSamlPtrOutput { return v.Saml }).(WorkspaceSamlPtrOutput)
}

// Configures the SMS authentication enabled email.
func (o WorkspaceOutput) SmsAuthenticationEnabledEmail() WorkspaceSmsAuthenticationEnabledEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceSmsAuthenticationEnabledEmailPtrOutput {
		return v.SmsAuthenticationEnabledEmail
	}).(WorkspaceSmsAuthenticationEnabledEmailPtrOutput)
}

// Configures how SSO domains are validated.
func (o WorkspaceOutput) SsoDomainPolicy() WorkspaceSsoDomainPolicyPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceSsoDomainPolicyPtrOutput { return v.SsoDomainPolicy }).(WorkspaceSsoDomainPolicyPtrOutput)
}

// Configures how multiple tenants can claim the same SSO domain.
func (o WorkspaceOutput) SsoMultiTenantPolicy() WorkspaceSsoMultiTenantPolicyPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceSsoMultiTenantPolicyPtrOutput { return v.SsoMultiTenantPolicy }).(WorkspaceSsoMultiTenantPolicyPtrOutput)
}

// Configures the suspicious IP email.
func (o WorkspaceOutput) SuspiciousIpEmail() WorkspaceSuspiciousIpEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceSuspiciousIpEmailPtrOutput { return v.SuspiciousIpEmail }).(WorkspaceSuspiciousIpEmailPtrOutput)
}

// Configures the user activation email.
func (o WorkspaceOutput) UserActivationEmail() WorkspaceUserActivationEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceUserActivationEmailPtrOutput { return v.UserActivationEmail }).(WorkspaceUserActivationEmailPtrOutput)
}

// Configures the user invitation email.
func (o WorkspaceOutput) UserInvitationEmail() WorkspaceUserInvitationEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceUserInvitationEmailPtrOutput { return v.UserInvitationEmail }).(WorkspaceUserInvitationEmailPtrOutput)
}

// Configures the user used invitation email.
func (o WorkspaceOutput) UserUsedInvitationEmail() WorkspaceUserUsedInvitationEmailPtrOutput {
	return o.ApplyT(func(v *Workspace) WorkspaceUserUsedInvitationEmailPtrOutput { return v.UserUsedInvitationEmail }).(WorkspaceUserUsedInvitationEmailPtrOutput)
}

type WorkspaceArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) Index(i pulumi.IntInput) WorkspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].([]*Workspace)[vs[1].(int)]
	}).(WorkspaceOutput)
}

type WorkspaceMapOutput struct{ *pulumi.OutputState }

func (WorkspaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) MapIndex(k pulumi.StringInput) WorkspaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].(map[string]*Workspace)[vs[1].(string)]
	}).(WorkspaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceInput)(nil)).Elem(), &Workspace{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceArrayInput)(nil)).Elem(), WorkspaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceMapInput)(nil)).Elem(), WorkspaceMap{})
	pulumi.RegisterOutputType(WorkspaceOutput{})
	pulumi.RegisterOutputType(WorkspaceArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceMapOutput{})
}
